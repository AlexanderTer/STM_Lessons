
STM32F746_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000520  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080006e8  080006e8  000106e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006f8  080006f8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080006f8  080006f8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006f8  080006f8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006f8  080006f8  000106f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006fc  080006fc  000106fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000704  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000704  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001fe8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000697  00000000  00000000  0002201c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000130  00000000  00000000  000226b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c8  00000000  00000000  000227e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbc3  00000000  00000000  000228b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e4a  00000000  00000000  0003e473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b99e  00000000  00000000  000402bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbc5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002a0  00000000  00000000  000dbcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080006d0 	.word	0x080006d0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	080006d0 	.word	0x080006d0

08000208 <init_GPIO>:
#include "gpio.h"
#include "stm32f7xx.h"
void init_GPIO_Output(GPIO_TypeDef *gpio, unsigned int pin);
void init_GPIO_AFunction(GPIO_TypeDef *gpio, unsigned int pin, unsigned int AF);

void init_GPIO(void) {
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800020c:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <init_GPIO+0x3c>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a0c      	ldr	r2, [pc, #48]	; (8000244 <init_GPIO+0x3c>)
 8000212:	f043 0304 	orr.w	r3, r3, #4
 8000216:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000218:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <init_GPIO+0x3c>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a09      	ldr	r2, [pc, #36]	; (8000244 <init_GPIO+0x3c>)
 800021e:	f043 0308 	orr.w	r3, r3, #8
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
	init_GPIO_Output(GPIOD, 1);
 8000224:	2101      	movs	r1, #1
 8000226:	4808      	ldr	r0, [pc, #32]	; (8000248 <init_GPIO+0x40>)
 8000228:	f000 f812 	bl	8000250 <init_GPIO_Output>
	init_GPIO_Output(GPIOD, 6);
 800022c:	2106      	movs	r1, #6
 800022e:	4806      	ldr	r0, [pc, #24]	; (8000248 <init_GPIO+0x40>)
 8000230:	f000 f80e 	bl	8000250 <init_GPIO_Output>
	init_GPIO_AFunction(GPIOC, 6, 3);
 8000234:	2203      	movs	r2, #3
 8000236:	2106      	movs	r1, #6
 8000238:	4804      	ldr	r0, [pc, #16]	; (800024c <init_GPIO+0x44>)
 800023a:	f000 f81e 	bl	800027a <init_GPIO_AFunction>
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40023800 	.word	0x40023800
 8000248:	40020c00 	.word	0x40020c00
 800024c:	40020800 	.word	0x40020800

08000250 <init_GPIO_Output>:

void init_GPIO_Output(GPIO_TypeDef *gpio, unsigned int pin) {
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	6039      	str	r1, [r7, #0]

	gpio->MODER |= 1 << (2 * pin);
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	683a      	ldr	r2, [r7, #0]
 8000260:	0052      	lsls	r2, r2, #1
 8000262:	2101      	movs	r1, #1
 8000264:	fa01 f202 	lsl.w	r2, r1, r2
 8000268:	431a      	orrs	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr

0800027a <init_GPIO_AFunction>:

void init_GPIO_AFunction(GPIO_TypeDef *gpio, unsigned int pin, unsigned int AF) {
 800027a:	b480      	push	{r7}
 800027c:	b085      	sub	sp, #20
 800027e:	af00      	add	r7, sp, #0
 8000280:	60f8      	str	r0, [r7, #12]
 8000282:	60b9      	str	r1, [r7, #8]
 8000284:	607a      	str	r2, [r7, #4]
	if (pin < 8)
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	2b07      	cmp	r3, #7
 800028a:	d80a      	bhi.n	80002a2 <init_GPIO_AFunction+0x28>
		gpio->AFR[0] |= AF << (4 * pin);
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	6a1a      	ldr	r2, [r3, #32]
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	431a      	orrs	r2, r3
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	621a      	str	r2, [r3, #32]
 80002a0:	e00a      	b.n	80002b8 <init_GPIO_AFunction+0x3e>
	else
		gpio->AFR[1] |= AF << (4 * (pin - 8));
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	3b08      	subs	r3, #8
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	6879      	ldr	r1, [r7, #4]
 80002ae:	fa01 f303 	lsl.w	r3, r1, r3
 80002b2:	431a      	orrs	r2, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	625a      	str	r2, [r3, #36]	; 0x24
	gpio->MODER |= 2 << (2 * pin);
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	68ba      	ldr	r2, [r7, #8]
 80002be:	0052      	lsls	r2, r2, #1
 80002c0:	2102      	movs	r1, #2
 80002c2:	fa01 f202 	lsl.w	r2, r1, r2
 80002c6:	431a      	orrs	r2, r3
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	601a      	str	r2, [r3, #0]
	gpio->OSPEEDR |= 3 << (2 * pin);
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	68ba      	ldr	r2, [r7, #8]
 80002d2:	0052      	lsls	r2, r2, #1
 80002d4:	2103      	movs	r1, #3
 80002d6:	fa01 f202 	lsl.w	r2, r1, r2
 80002da:	431a      	orrs	r2, r3
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	609a      	str	r2, [r3, #8]
}
 80002e0:	bf00      	nop
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr

080002ec <TIM8_UP_TIM13_IRQHandler>:

	// Включаем прерывание TIM8_UP_TIM13 в NVIC
	NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
}

void TIM8_UP_TIM13_IRQHandler(void) {
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0

	TIM8->SR &= ~TIM_SR_UIF; // Сброс фалага прерывания
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <TIM8_UP_TIM13_IRQHandler+0x28>)
 80002f2:	691b      	ldr	r3, [r3, #16]
 80002f4:	4a07      	ldr	r2, [pc, #28]	; (8000314 <TIM8_UP_TIM13_IRQHandler+0x28>)
 80002f6:	f023 0301 	bic.w	r3, r3, #1
 80002fa:	6113      	str	r3, [r2, #16]

	GPIOD->ODR ^= 1 << 6;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <TIM8_UP_TIM13_IRQHandler+0x2c>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a05      	ldr	r2, [pc, #20]	; (8000318 <TIM8_UP_TIM13_IRQHandler+0x2c>)
 8000302:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000306:	6153      	str	r3, [r2, #20]

}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40010400 	.word	0x40010400
 8000318:	40020c00 	.word	0x40020c00

0800031c <main>:
#include "timer.h"

#include <stdint.h>
#include "stm32f7xx.h"

int main(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000322:	b672      	cpsid	i
}
 8000324:	bf00      	nop
	// Global interrupt disable
	__disable_irq();
	init_RCC();
 8000326:	f000 f81b 	bl	8000360 <init_RCC>
	init_GPIO();
 800032a:	f7ff ff6d 	bl	8000208 <init_GPIO>
	init_timer8();
 800032e:	f000 f939 	bl	80005a4 <init_timer8>
  __ASM volatile ("cpsie i" : : : "memory");
 8000332:	b662      	cpsie	i
}
 8000334:	bf00      	nop

	// Global interrupt enable
	__enable_irq();
	/* Loop forever */
	for (;;) {
		for (int i = 0; i < 10000000; i++)
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	e002      	b.n	8000342 <main+0x26>
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	3301      	adds	r3, #1
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <main+0x3c>)
 8000346:	4293      	cmp	r3, r2
 8000348:	dbf8      	blt.n	800033c <main+0x20>
			;
		GPIOD->ODR ^= 1 << 1;
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <main+0x40>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a03      	ldr	r2, [pc, #12]	; (800035c <main+0x40>)
 8000350:	f083 0302 	eor.w	r3, r3, #2
 8000354:	6153      	str	r3, [r2, #20]
		for (int i = 0; i < 10000000; i++)
 8000356:	e7ee      	b.n	8000336 <main+0x1a>
 8000358:	00989680 	.word	0x00989680
 800035c:	40020c00 	.word	0x40020c00

08000360 <init_RCC>:
#include "stm32f7xx.h"
#include "rcc.h"
void init_RCC(void) {
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
	// Сброс пеерфирии

	RCC->AHB1RSTR = 0xFFFFFFFF;
 8000366:	4b43      	ldr	r3, [pc, #268]	; (8000474 <init_RCC+0x114>)
 8000368:	f04f 32ff 	mov.w	r2, #4294967295
 800036c:	611a      	str	r2, [r3, #16]
	RCC->AHB1RSTR = 0x00000000;
 800036e:	4b41      	ldr	r3, [pc, #260]	; (8000474 <init_RCC+0x114>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]

	RCC->AHB2RSTR = 0xFFFFFFFF;
 8000374:	4b3f      	ldr	r3, [pc, #252]	; (8000474 <init_RCC+0x114>)
 8000376:	f04f 32ff 	mov.w	r2, #4294967295
 800037a:	615a      	str	r2, [r3, #20]
	RCC->AHB2RSTR = 0x00000000;
 800037c:	4b3d      	ldr	r3, [pc, #244]	; (8000474 <init_RCC+0x114>)
 800037e:	2200      	movs	r2, #0
 8000380:	615a      	str	r2, [r3, #20]

	RCC->APB1RSTR = 0xFFFFFFFF;
 8000382:	4b3c      	ldr	r3, [pc, #240]	; (8000474 <init_RCC+0x114>)
 8000384:	f04f 32ff 	mov.w	r2, #4294967295
 8000388:	621a      	str	r2, [r3, #32]
	RCC->APB1RSTR = 0x00000000;
 800038a:	4b3a      	ldr	r3, [pc, #232]	; (8000474 <init_RCC+0x114>)
 800038c:	2200      	movs	r2, #0
 800038e:	621a      	str	r2, [r3, #32]

	RCC->APB2RSTR = 0xFFFFFFFF;
 8000390:	4b38      	ldr	r3, [pc, #224]	; (8000474 <init_RCC+0x114>)
 8000392:	f04f 32ff 	mov.w	r2, #4294967295
 8000396:	625a      	str	r2, [r3, #36]	; 0x24
	RCC->APB2RSTR = 0x00000000;
 8000398:	4b36      	ldr	r3, [pc, #216]	; (8000474 <init_RCC+0x114>)
 800039a:	2200      	movs	r2, #0
 800039c:	625a      	str	r2, [r3, #36]	; 0x24

	// Обновление переменной с частотой тактирования

	SystemCoreClockUpdate();
 800039e:	f000 f881 	bl	80004a4 <SystemCoreClockUpdate>

	// return;

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003a2:	4b34      	ldr	r3, [pc, #208]	; (8000474 <init_RCC+0x114>)
 80003a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003a6:	4a33      	ldr	r2, [pc, #204]	; (8000474 <init_RCC+0x114>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ac:	6413      	str	r3, [r2, #64]	; 0x40

	// Включение внешнего генератора
	RCC->CR |= RCC_CR_HSEBYP;
 80003ae:	4b31      	ldr	r3, [pc, #196]	; (8000474 <init_RCC+0x114>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a30      	ldr	r2, [pc, #192]	; (8000474 <init_RCC+0x114>)
 80003b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003b8:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEON;
 80003ba:	4b2e      	ldr	r3, [pc, #184]	; (8000474 <init_RCC+0x114>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a2d      	ldr	r2, [pc, #180]	; (8000474 <init_RCC+0x114>)
 80003c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003c4:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY))
 80003c6:	bf00      	nop
 80003c8:	4b2a      	ldr	r3, [pc, #168]	; (8000474 <init_RCC+0x114>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d0f9      	beq.n	80003c8 <init_RCC+0x68>
		;

	// Выключение PLL
	RCC->CR &= ~RCC_CR_PLLON;
 80003d4:	4b27      	ldr	r3, [pc, #156]	; (8000474 <init_RCC+0x114>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a26      	ldr	r2, [pc, #152]	; (8000474 <init_RCC+0x114>)
 80003da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80003de:	6013      	str	r3, [r2, #0]
	while (RCC->CR & RCC_CR_PLLRDY)
 80003e0:	bf00      	nop
 80003e2:	4b24      	ldr	r3, [pc, #144]	; (8000474 <init_RCC+0x114>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d1f9      	bne.n	80003e2 <init_RCC+0x82>
		;

	// Настройка предделителей для шин переферии
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV4 | RCC_CFGR_PPRE2_DIV2;
 80003ee:	4b21      	ldr	r3, [pc, #132]	; (8000474 <init_RCC+0x114>)
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	4a20      	ldr	r2, [pc, #128]	; (8000474 <init_RCC+0x114>)
 80003f4:	f443 4314 	orr.w	r3, r3, #37888	; 0x9400
 80003f8:	6093      	str	r3, [r2, #8]

	// Настройка предделителей PLL
	uint32_t pllcfgr = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	607b      	str	r3, [r7, #4]

	pllcfgr |= RCC_PLLCFGR_PLLSRC_HSE;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000404:	607b      	str	r3, [r7, #4]
	pllcfgr |= 25 << RCC_PLLCFGR_PLLM_Pos;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	f043 0319 	orr.w	r3, r3, #25
 800040c:	607b      	str	r3, [r7, #4]
	pllcfgr |= 432 << RCC_PLLCFGR_PLLN_Pos;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	f443 43d8 	orr.w	r3, r3, #27648	; 0x6c00
 8000414:	607b      	str	r3, [r7, #4]
	pllcfgr |= 0 << RCC_PLLCFGR_PLLP_Pos;

	RCC->PLLCFGR = pllcfgr;
 8000416:	4a17      	ldr	r2, [pc, #92]	; (8000474 <init_RCC+0x114>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	6053      	str	r3, [r2, #4]

	// Настраиваем latancy на 7 для 216 МГц
	FLASH->ACR |= (7 << FLASH_ACR_LATENCY_Pos);
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <init_RCC+0x118>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a15      	ldr	r2, [pc, #84]	; (8000478 <init_RCC+0x118>)
 8000422:	f043 0307 	orr.w	r3, r3, #7
 8000426:	6013      	str	r3, [r2, #0]

	RCC->CR |= RCC_CR_PLLON;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <init_RCC+0x114>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a11      	ldr	r2, [pc, #68]	; (8000474 <init_RCC+0x114>)
 800042e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000432:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY))
 8000434:	bf00      	nop
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <init_RCC+0x114>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800043e:	2b00      	cmp	r3, #0
 8000440:	d0f9      	beq.n	8000436 <init_RCC+0xd6>
		;

	// Over Drive enable
	PWR->CR1 |= (uint32_t) PWR_CR1_ODEN;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <init_RCC+0x11c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a0d      	ldr	r2, [pc, #52]	; (800047c <init_RCC+0x11c>)
 8000448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800044c:	6013      	str	r3, [r2, #0]
	PWR->CR1 |= (uint32_t) PWR_CR1_ODSWEN;
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <init_RCC+0x11c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a0a      	ldr	r2, [pc, #40]	; (800047c <init_RCC+0x11c>)
 8000454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000458:	6013      	str	r3, [r2, #0]

	// Выбор PLL как основного источника тактирования
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <init_RCC+0x114>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	4a05      	ldr	r2, [pc, #20]	; (8000474 <init_RCC+0x114>)
 8000460:	f043 0302 	orr.w	r3, r3, #2
 8000464:	6093      	str	r3, [r2, #8]

	SystemCoreClockUpdate();
 8000466:	f000 f81d 	bl	80004a4 <SystemCoreClockUpdate>
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40023800 	.word	0x40023800
 8000478:	40023c00 	.word	0x40023c00
 800047c:	40007000 	.word	0x40007000

08000480 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <SystemInit+0x20>)
 8000486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800048a:	4a05      	ldr	r2, [pc, #20]	; (80004a0 <SystemInit+0x20>)
 800048c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	e000ed00 	.word	0xe000ed00

080004a4 <SystemCoreClockUpdate>:
 *           value for HSE crystal.
 *
 * @param  None
 * @retval None
 */
void SystemCoreClockUpdate(void) {
 80004a4:	b480      	push	{r7}
 80004a6:	b087      	sub	sp, #28
 80004a8:	af00      	add	r7, sp, #0
	uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80004aa:	2300      	movs	r3, #0
 80004ac:	613b      	str	r3, [r7, #16]
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
 80004b2:	2302      	movs	r3, #2
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	2300      	movs	r3, #0
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	2302      	movs	r3, #2
 80004bc:	607b      	str	r3, [r7, #4]

	/* Get SYSCLK source -------------------------------------------------------*/
	tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004be:	4b34      	ldr	r3, [pc, #208]	; (8000590 <SystemCoreClockUpdate+0xec>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	f003 030c 	and.w	r3, r3, #12
 80004c6:	613b      	str	r3, [r7, #16]

	switch (tmp) {
 80004c8:	693b      	ldr	r3, [r7, #16]
 80004ca:	2b08      	cmp	r3, #8
 80004cc:	d011      	beq.n	80004f2 <SystemCoreClockUpdate+0x4e>
 80004ce:	693b      	ldr	r3, [r7, #16]
 80004d0:	2b08      	cmp	r3, #8
 80004d2:	d844      	bhi.n	800055e <SystemCoreClockUpdate+0xba>
 80004d4:	693b      	ldr	r3, [r7, #16]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d003      	beq.n	80004e2 <SystemCoreClockUpdate+0x3e>
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	2b04      	cmp	r3, #4
 80004de:	d004      	beq.n	80004ea <SystemCoreClockUpdate+0x46>
 80004e0:	e03d      	b.n	800055e <SystemCoreClockUpdate+0xba>
	case 0x00: /* HSI used as system clock source */
		SystemCoreClock = HSI_VALUE;
 80004e2:	4b2c      	ldr	r3, [pc, #176]	; (8000594 <SystemCoreClockUpdate+0xf0>)
 80004e4:	4a2c      	ldr	r2, [pc, #176]	; (8000598 <SystemCoreClockUpdate+0xf4>)
 80004e6:	601a      	str	r2, [r3, #0]
		break;
 80004e8:	e03d      	b.n	8000566 <SystemCoreClockUpdate+0xc2>
	case 0x04: /* HSE used as system clock source */
		SystemCoreClock = HSE_VALUE;
 80004ea:	4b2a      	ldr	r3, [pc, #168]	; (8000594 <SystemCoreClockUpdate+0xf0>)
 80004ec:	4a2b      	ldr	r2, [pc, #172]	; (800059c <SystemCoreClockUpdate+0xf8>)
 80004ee:	601a      	str	r2, [r3, #0]
		break;
 80004f0:	e039      	b.n	8000566 <SystemCoreClockUpdate+0xc2>
	case 0x08: /* PLL used as system clock source */

		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
		 SYSCLK = PLL_VCO / PLL_P
		 */
		pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004f2:	4b27      	ldr	r3, [pc, #156]	; (8000590 <SystemCoreClockUpdate+0xec>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	0d9b      	lsrs	r3, r3, #22
 80004f8:	f003 0301 	and.w	r3, r3, #1
 80004fc:	60bb      	str	r3, [r7, #8]
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004fe:	4b24      	ldr	r3, [pc, #144]	; (8000590 <SystemCoreClockUpdate+0xec>)
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000506:	607b      	str	r3, [r7, #4]

		if (pllsource != 0) {
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d00c      	beq.n	8000528 <SystemCoreClockUpdate+0x84>
			/* HSE used as PLL clock source */
			pllvco = (HSE_VALUE / pllm)
 800050e:	4a23      	ldr	r2, [pc, #140]	; (800059c <SystemCoreClockUpdate+0xf8>)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	fbb2 f3f3 	udiv	r3, r2, r3
					* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000516:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <SystemCoreClockUpdate+0xec>)
 8000518:	6852      	ldr	r2, [r2, #4]
 800051a:	0992      	lsrs	r2, r2, #6
 800051c:	f3c2 0208 	ubfx	r2, r2, #0, #9
			pllvco = (HSE_VALUE / pllm)
 8000520:	fb02 f303 	mul.w	r3, r2, r3
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	e00b      	b.n	8000540 <SystemCoreClockUpdate+0x9c>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (HSI_VALUE / pllm)
 8000528:	4a1b      	ldr	r2, [pc, #108]	; (8000598 <SystemCoreClockUpdate+0xf4>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	fbb2 f3f3 	udiv	r3, r2, r3
					* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000530:	4a17      	ldr	r2, [pc, #92]	; (8000590 <SystemCoreClockUpdate+0xec>)
 8000532:	6852      	ldr	r2, [r2, #4]
 8000534:	0992      	lsrs	r2, r2, #6
 8000536:	f3c2 0208 	ubfx	r2, r2, #0, #9
			pllvco = (HSI_VALUE / pllm)
 800053a:	fb02 f303 	mul.w	r3, r2, r3
 800053e:	617b      	str	r3, [r7, #20]
		}

		pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> 16) + 1) * 2;
 8000540:	4b13      	ldr	r3, [pc, #76]	; (8000590 <SystemCoreClockUpdate+0xec>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	0c1b      	lsrs	r3, r3, #16
 8000546:	f003 0303 	and.w	r3, r3, #3
 800054a:	3301      	adds	r3, #1
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
		SystemCoreClock = pllvco / pllp;
 8000550:	697a      	ldr	r2, [r7, #20]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	fbb2 f3f3 	udiv	r3, r2, r3
 8000558:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <SystemCoreClockUpdate+0xf0>)
 800055a:	6013      	str	r3, [r2, #0]
		break;
 800055c:	e003      	b.n	8000566 <SystemCoreClockUpdate+0xc2>
	default:
		SystemCoreClock = HSI_VALUE;
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <SystemCoreClockUpdate+0xf0>)
 8000560:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <SystemCoreClockUpdate+0xf4>)
 8000562:	601a      	str	r2, [r3, #0]
		break;
 8000564:	bf00      	nop
	}
	/* Compute HCLK frequency --------------------------------------------------*/
	/* Get HCLK prescaler */
	tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <SystemCoreClockUpdate+0xec>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	091b      	lsrs	r3, r3, #4
 800056c:	f003 030f 	and.w	r3, r3, #15
 8000570:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <SystemCoreClockUpdate+0xfc>)
 8000572:	5cd3      	ldrb	r3, [r2, r3]
 8000574:	613b      	str	r3, [r7, #16]
	/* HCLK frequency */
	SystemCoreClock >>= tmp;
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <SystemCoreClockUpdate+0xf0>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	fa22 f303 	lsr.w	r3, r2, r3
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <SystemCoreClockUpdate+0xf0>)
 8000582:	6013      	str	r3, [r2, #0]
}
 8000584:	bf00      	nop
 8000586:	371c      	adds	r7, #28
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	40023800 	.word	0x40023800
 8000594:	20000000 	.word	0x20000000
 8000598:	00f42400 	.word	0x00f42400
 800059c:	017d7840 	.word	0x017d7840
 80005a0:	080006e8 	.word	0x080006e8

080005a4 <init_timer8>:
#include "timer.h"
#include "stm32f7xx.h"

void init_timer8(void) {
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	// Включение тактирования модуля таймер8
	RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 80005a8:	4b20      	ldr	r3, [pc, #128]	; (800062c <init_timer8+0x88>)
 80005aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ac:	4a1f      	ldr	r2, [pc, #124]	; (800062c <init_timer8+0x88>)
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	6453      	str	r3, [r2, #68]	; 0x44

	// Предделитель таймера 1
	// Макс счёт 1079 (100кГц)
	TIM8->PSC = 0;
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <init_timer8+0x8c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM8->ARR = 216000000 / 100000 / 2 - 1;
 80005ba:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <init_timer8+0x8c>)
 80005bc:	f240 4237 	movw	r2, #1079	; 0x437
 80005c0:	62da      	str	r2, [r3, #44]	; 0x2c

	// Регистр сравнения: 540 (q 50%)
	TIM8->CCR1 = TIM8->ARR / 2;
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <init_timer8+0x8c>)
 80005c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c6:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <init_timer8+0x8c>)
 80005c8:	085b      	lsrs	r3, r3, #1
 80005ca:	6353      	str	r3, [r2, #52]	; 0x34

	// Симметричный счёт (режим 2)
	TIM8->CR1 |= TIM_CR1_CMS_1;
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <init_timer8+0x8c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a17      	ldr	r2, [pc, #92]	; (8000630 <init_timer8+0x8c>)
 80005d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005d6:	6013      	str	r3, [r2, #0]

	// Включаем канал сравнея
	TIM8->CCER |= TIM_CCER_CC1E;
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <init_timer8+0x8c>)
 80005da:	6a1b      	ldr	r3, [r3, #32]
 80005dc:	4a14      	ldr	r2, [pc, #80]	; (8000630 <init_timer8+0x8c>)
 80005de:	f043 0301 	orr.w	r3, r3, #1
 80005e2:	6213      	str	r3, [r2, #32]

	// Режим ШИМ 1
	TIM8->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <init_timer8+0x8c>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a11      	ldr	r2, [pc, #68]	; (8000630 <init_timer8+0x8c>)
 80005ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80005ee:	6193      	str	r3, [r2, #24]

	// Вкл. буферизации
	TIM8->CCMR1 |= TIM_CCMR1_OC1PE;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <init_timer8+0x8c>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <init_timer8+0x8c>)
 80005f6:	f043 0308 	orr.w	r3, r3, #8
 80005fa:	6193      	str	r3, [r2, #24]

	// Вкл физ. канал выхода
	TIM8->BDTR |= TIM_BDTR_MOE;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <init_timer8+0x8c>)
 80005fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000600:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <init_timer8+0x8c>)
 8000602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000606:	6453      	str	r3, [r2, #68]	; 0x44

	// Вкл прерывания по обновлению
	TIM8->DIER |= TIM_DIER_UIE;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <init_timer8+0x8c>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4a08      	ldr	r2, [pc, #32]	; (8000630 <init_timer8+0x8c>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	60d3      	str	r3, [r2, #12]

	// Вкл счёт таймера
	TIM8->CR1 |= TIM_CR1_CEN;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <init_timer8+0x8c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a05      	ldr	r2, [pc, #20]	; (8000630 <init_timer8+0x8c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40010400 	.word	0x40010400

08000634 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000636:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000638:	f7ff ff22 	bl	8000480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <LoopForever+0x6>)
  ldr r1, =_edata
 800063e:	490d      	ldr	r1, [pc, #52]	; (8000674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000640:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <LoopForever+0xe>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000654:	4c0a      	ldr	r4, [pc, #40]	; (8000680 <LoopForever+0x16>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000662:	f000 f811 	bl	8000688 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000666:	f7ff fe59 	bl	800031c <main>

0800066a <LoopForever>:

LoopForever:
    b LoopForever
 800066a:	e7fe      	b.n	800066a <LoopForever>
  ldr   r0, =_estack
 800066c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000678:	08000700 	.word	0x08000700
  ldr r2, =_sbss
 800067c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000680:	20000020 	.word	0x20000020

08000684 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC_IRQHandler>
	...

08000688 <__libc_init_array>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	4d0d      	ldr	r5, [pc, #52]	; (80006c0 <__libc_init_array+0x38>)
 800068c:	4c0d      	ldr	r4, [pc, #52]	; (80006c4 <__libc_init_array+0x3c>)
 800068e:	1b64      	subs	r4, r4, r5
 8000690:	10a4      	asrs	r4, r4, #2
 8000692:	2600      	movs	r6, #0
 8000694:	42a6      	cmp	r6, r4
 8000696:	d109      	bne.n	80006ac <__libc_init_array+0x24>
 8000698:	4d0b      	ldr	r5, [pc, #44]	; (80006c8 <__libc_init_array+0x40>)
 800069a:	4c0c      	ldr	r4, [pc, #48]	; (80006cc <__libc_init_array+0x44>)
 800069c:	f000 f818 	bl	80006d0 <_init>
 80006a0:	1b64      	subs	r4, r4, r5
 80006a2:	10a4      	asrs	r4, r4, #2
 80006a4:	2600      	movs	r6, #0
 80006a6:	42a6      	cmp	r6, r4
 80006a8:	d105      	bne.n	80006b6 <__libc_init_array+0x2e>
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b0:	4798      	blx	r3
 80006b2:	3601      	adds	r6, #1
 80006b4:	e7ee      	b.n	8000694 <__libc_init_array+0xc>
 80006b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ba:	4798      	blx	r3
 80006bc:	3601      	adds	r6, #1
 80006be:	e7f2      	b.n	80006a6 <__libc_init_array+0x1e>
 80006c0:	080006f8 	.word	0x080006f8
 80006c4:	080006f8 	.word	0x080006f8
 80006c8:	080006f8 	.word	0x080006f8
 80006cc:	080006fc 	.word	0x080006fc

080006d0 <_init>:
 80006d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d2:	bf00      	nop
 80006d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006d6:	bc08      	pop	{r3}
 80006d8:	469e      	mov	lr, r3
 80006da:	4770      	bx	lr

080006dc <_fini>:
 80006dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006de:	bf00      	nop
 80006e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006e2:	bc08      	pop	{r3}
 80006e4:	469e      	mov	lr, r3
 80006e6:	4770      	bx	lr
