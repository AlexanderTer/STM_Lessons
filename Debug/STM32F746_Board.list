
STM32F746_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d10  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001ed8  08001ed8  00011ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ee8  08001ee8  00020134  2**0
                  CONTENTS
  4 .ARM          00000000  08001ee8  08001ee8  00020134  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ee8  08001ee8  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ee8  08001ee8  00011ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001eec  08001eec  00011eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08001ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .adc_buf      00000018  2000011c  0800200c  0002011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00009d3c  20000134  08002024  00020134  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009e70  08002024  00029e70  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005152  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001170  00000000  00000000  000252b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000310  00000000  00000000  00026428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000238  00000000  00000000  00026738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c19f  00000000  00000000  00026970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004e0d  00000000  00000000  00042b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a03f6  00000000  00000000  0004791c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e7d12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000978  00000000  00000000  000e7d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000023  00000000  00000000  000e86dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000134 	.word	0x20000134
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08001ec0 	.word	0x08001ec0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000138 	.word	0x20000138
 8000204:	08001ec0 	.word	0x08001ec0

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <DMA2_Stream0_IRQHandler>:
void set_shifts(void);
void protect_software(void);
void integral_protect(void);

void timer_PWM_Off(void);
void DMA2_Stream0_IRQHandler(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0

	// Сброс флага DMA2 по окончанию передачи данных
	DMA2->LIFCR |= DMA_LIFCR_CTCIF0;
 800087a:	4b70      	ldr	r3, [pc, #448]	; (8000a3c <DMA2_Stream0_IRQHandler+0x1c8>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	4a6f      	ldr	r2, [pc, #444]	; (8000a3c <DMA2_Stream0_IRQHandler+0x1c8>)
 8000880:	f043 0320 	orr.w	r3, r3, #32
 8000884:	6093      	str	r3, [r2, #8]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000886:	f3bf 8f6f 	isb	sy
}
 800088a:	bf00      	nop

	// Ожидание выполнения инструкций
	__ISB();

	shift_and_scale();
 800088c:	f000 f8f0 	bl	8000a70 <shift_and_scale>

	protect_software();
 8000890:	f000 f9aa 	bl	8000be8 <protect_software>

	set_shifts();
 8000894:	f000 f96a 	bl	8000b6c <set_shifts>

#ifdef CONTROL_MASTER

	// Усреднение выходного тока
	Boost_Measure.data.in_av = MovingFloatFilter(&IN_FILTER,
 8000898:	4b69      	ldr	r3, [pc, #420]	; (8000a40 <DMA2_Stream0_IRQHandler+0x1cc>)
 800089a:	edd3 7a06 	vldr	s15, [r3, #24]
 800089e:	eeb0 0a67 	vmov.f32	s0, s15
 80008a2:	4868      	ldr	r0, [pc, #416]	; (8000a44 <DMA2_Stream0_IRQHandler+0x1d0>)
 80008a4:	f000 fab4 	bl	8000e10 <MovingFloatFilter>
 80008a8:	eef0 7a40 	vmov.f32	s15, s0
 80008ac:	4b64      	ldr	r3, [pc, #400]	; (8000a40 <DMA2_Stream0_IRQHandler+0x1cc>)
 80008ae:	edc3 7a07 	vstr	s15, [r3, #28]
//	else
//		cnt = 0;

// Voltage loop calculate
	// Ошибка регулирования по напряжению
	float error_Voltage = U_REF - Boost_Measure.data.u2 + Boost_Measure.data.in_av * R_COMP;
 80008b2:	4b63      	ldr	r3, [pc, #396]	; (8000a40 <DMA2_Stream0_IRQHandler+0x1cc>)
 80008b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80008b8:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8000a48 <DMA2_Stream0_IRQHandler+0x1d4>
 80008bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008c0:	4b5f      	ldr	r3, [pc, #380]	; (8000a40 <DMA2_Stream0_IRQHandler+0x1cc>)
 80008c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80008c6:	eddf 6a61 	vldr	s13, [pc, #388]	; 8000a4c <DMA2_Stream0_IRQHandler+0x1d8>
 80008ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008d2:	edc7 7a05 	vstr	s15, [r7, #20]

	// Расчёт ПИД - регулятора
	REF_CURRENT = PID_Controller(&Boost_Control.pid_voltage, 0.5 * error_Voltage) + Boost_Measure.data.inj * (0.0f / 1.65f);
 80008d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80008da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80008de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008e2:	eeb0 0a67 	vmov.f32	s0, s15
 80008e6:	485a      	ldr	r0, [pc, #360]	; (8000a50 <DMA2_Stream0_IRQHandler+0x1dc>)
 80008e8:	f000 fb6d 	bl	8000fc6 <PID_Controller>
 80008ec:	eeb0 7a40 	vmov.f32	s14, s0
 80008f0:	4b53      	ldr	r3, [pc, #332]	; (8000a40 <DMA2_Stream0_IRQHandler+0x1cc>)
 80008f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80008f6:	eddf 6a57 	vldr	s13, [pc, #348]	; 8000a54 <DMA2_Stream0_IRQHandler+0x1e0>
 80008fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000902:	4b55      	ldr	r3, [pc, #340]	; (8000a58 <DMA2_Stream0_IRQHandler+0x1e4>)
 8000904:	edc3 7a00 	vstr	s15, [r3]


#endif

	// Ошибка регулирования тока ректора
		float error_current = REF_CURRENT - Boost_Measure.data.iL;
 8000908:	4b53      	ldr	r3, [pc, #332]	; (8000a58 <DMA2_Stream0_IRQHandler+0x1e4>)
 800090a:	ed93 7a00 	vldr	s14, [r3]
 800090e:	4b4c      	ldr	r3, [pc, #304]	; (8000a40 <DMA2_Stream0_IRQHandler+0x1cc>)
 8000910:	edd3 7a03 	vldr	s15, [r3, #12]
 8000914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000918:	edc7 7a04 	vstr	s15, [r7, #16]

	// Расчёт ПИД - регулятора
	float PID_output = PID_Controller(&Boost_Control.pid_current,
 800091c:	ed97 0a04 	vldr	s0, [r7, #16]
 8000920:	484e      	ldr	r0, [pc, #312]	; (8000a5c <DMA2_Stream0_IRQHandler+0x1e8>)
 8000922:	f000 fb50 	bl	8000fc6 <PID_Controller>
 8000926:	ed87 0a03 	vstr	s0, [r7, #12]
			error_current);



	Boost_Control.duty = PID_output;
 800092a:	4a4d      	ldr	r2, [pc, #308]	; (8000a60 <DMA2_Stream0_IRQHandler+0x1ec>)
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	6013      	str	r3, [r2, #0]

	// Холостой ход (Burst mode)
	if ((Boost_Control.duty < Boost_Protect.sat.duty_min) || (REF_CURRENT < 0))
 8000930:	4b4b      	ldr	r3, [pc, #300]	; (8000a60 <DMA2_Stream0_IRQHandler+0x1ec>)
 8000932:	ed93 7a00 	vldr	s14, [r3]
 8000936:	4b4b      	ldr	r3, [pc, #300]	; (8000a64 <DMA2_Stream0_IRQHandler+0x1f0>)
 8000938:	edd3 7a07 	vldr	s15, [r3, #28]
 800093c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000944:	d407      	bmi.n	8000956 <DMA2_Stream0_IRQHandler+0xe2>
 8000946:	4b44      	ldr	r3, [pc, #272]	; (8000a58 <DMA2_Stream0_IRQHandler+0x1e4>)
 8000948:	edd3 7a00 	vldr	s15, [r3]
 800094c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000954:	d503      	bpl.n	800095e <DMA2_Stream0_IRQHandler+0xea>
		TIM8->CCR1 = 0;
 8000956:	4b44      	ldr	r3, [pc, #272]	; (8000a68 <DMA2_Stream0_IRQHandler+0x1f4>)
 8000958:	2200      	movs	r2, #0
 800095a:	635a      	str	r2, [r3, #52]	; 0x34
 800095c:	e02d      	b.n	80009ba <DMA2_Stream0_IRQHandler+0x146>
	else if (Boost_Control.duty > Boost_Protect.sat.duty_max)
 800095e:	4b40      	ldr	r3, [pc, #256]	; (8000a60 <DMA2_Stream0_IRQHandler+0x1ec>)
 8000960:	ed93 7a00 	vldr	s14, [r3]
 8000964:	4b3f      	ldr	r3, [pc, #252]	; (8000a64 <DMA2_Stream0_IRQHandler+0x1f0>)
 8000966:	edd3 7a08 	vldr	s15, [r3, #32]
 800096a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800096e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000972:	dd11      	ble.n	8000998 <DMA2_Stream0_IRQHandler+0x124>
		TIM8->CCR1 = TIM8->ARR * Boost_Protect.sat.duty_max;
 8000974:	4b3c      	ldr	r3, [pc, #240]	; (8000a68 <DMA2_Stream0_IRQHandler+0x1f4>)
 8000976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000978:	ee07 3a90 	vmov	s15, r3
 800097c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000980:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <DMA2_Stream0_IRQHandler+0x1f0>)
 8000982:	edd3 7a08 	vldr	s15, [r3, #32]
 8000986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800098a:	4b37      	ldr	r3, [pc, #220]	; (8000a68 <DMA2_Stream0_IRQHandler+0x1f4>)
 800098c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000990:	ee17 2a90 	vmov	r2, s15
 8000994:	635a      	str	r2, [r3, #52]	; 0x34
 8000996:	e010      	b.n	80009ba <DMA2_Stream0_IRQHandler+0x146>
	else
		TIM8->CCR1 = TIM8->ARR * Boost_Control.duty;
 8000998:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <DMA2_Stream0_IRQHandler+0x1f4>)
 800099a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099c:	ee07 3a90 	vmov	s15, r3
 80009a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009a4:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <DMA2_Stream0_IRQHandler+0x1ec>)
 80009a6:	edd3 7a00 	vldr	s15, [r3]
 80009aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ae:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <DMA2_Stream0_IRQHandler+0x1f4>)
 80009b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009b4:	ee17 2a90 	vmov	r2, s15
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34

	/* Вывод сигнала на цап*/
	unsigned int dac1, dac2;

	//
	Boost_Measure.dac[0].data = REF_CURRENT;
 80009ba:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <DMA2_Stream0_IRQHandler+0x1e4>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a20      	ldr	r2, [pc, #128]	; (8000a40 <DMA2_Stream0_IRQHandler+0x1cc>)
 80009c0:	6753      	str	r3, [r2, #116]	; 0x74

	// Выводим переменную на ЦАП2
	Boost_Measure.dac[1].data = REF_CURRENT
			- Boost_Measure.data.inj * (0.0f / 1.65f);
 80009c2:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <DMA2_Stream0_IRQHandler+0x1e4>)
 80009c4:	ed93 7a00 	vldr	s14, [r3]
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <DMA2_Stream0_IRQHandler+0x1cc>)
 80009ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80009ce:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000a54 <DMA2_Stream0_IRQHandler+0x1e0>
 80009d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009d6:	ee77 7a67 	vsub.f32	s15, s14, s15
	Boost_Measure.dac[1].data = REF_CURRENT
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <DMA2_Stream0_IRQHandler+0x1cc>)
 80009dc:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

	// Фильтруем переменную
	//dac2 = MovingFloatFilter(&FILTER_MOV, Boost_Measure.data.inj) * (4095.f / 100.f);

	// Пересчитываем внутренние переменные в значения регистров ЦАП1 и ЦАП2
	dac1 = Boost_Measure.dac[0].scale * Boost_Measure.dac[0].data
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <DMA2_Stream0_IRQHandler+0x1cc>)
 80009e2:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <DMA2_Stream0_IRQHandler+0x1cc>)
 80009e8:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80009ec:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ Boost_Measure.dac[0].shift;
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <DMA2_Stream0_IRQHandler+0x1cc>)
 80009f2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80009f6:	ee77 7a27 	vadd.f32	s15, s14, s15
	dac1 = Boost_Measure.dac[0].scale * Boost_Measure.dac[0].data
 80009fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009fe:	ee17 3a90 	vmov	r3, s15
 8000a02:	60bb      	str	r3, [r7, #8]
	dac2 = Boost_Measure.dac[1].scale * Boost_Measure.dac[1].data
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <DMA2_Stream0_IRQHandler+0x1cc>)
 8000a06:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <DMA2_Stream0_IRQHandler+0x1cc>)
 8000a0c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8000a10:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ Boost_Measure.dac[1].shift;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <DMA2_Stream0_IRQHandler+0x1cc>)
 8000a16:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8000a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
	dac2 = Boost_Measure.dac[1].scale * Boost_Measure.dac[1].data
 8000a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a22:	ee17 3a90 	vmov	r3, s15
 8000a26:	607b      	str	r3, [r7, #4]

	// Запись чисел в ЦАП1 и ЦАП2
	DAC->DHR12RD = dac1 | (dac2 << 16);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	041a      	lsls	r2, r3, #16
 8000a2c:	490f      	ldr	r1, [pc, #60]	; (8000a6c <DMA2_Stream0_IRQHandler+0x1f8>)
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	620b      	str	r3, [r1, #32]

}
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40026400 	.word	0x40026400
 8000a40:	20000068 	.word	0x20000068
 8000a44:	20000150 	.word	0x20000150
 8000a48:	42c40000 	.word	0x42c40000
 8000a4c:	3ef0a3d7 	.word	0x3ef0a3d7
 8000a50:	20000038 	.word	0x20000038
 8000a54:	00000000 	.word	0x00000000
 8000a58:	20009d98 	.word	0x20009d98
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000000 	.word	0x20000000
 8000a64:	200000f4 	.word	0x200000f4
 8000a68:	40010400 	.word	0x40010400
 8000a6c:	40007400 	.word	0x40007400

08000a70 <shift_and_scale>:

/**
 * \brief Функция пересчёта значений в физические величины
 */
void shift_and_scale(void) {
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
	extern volatile unsigned int ADC_Buffer[];
	Boost_Measure.data.inj = Boost_Measure.scale.inj * ADC_Buffer[0]
 8000a74:	4b3b      	ldr	r3, [pc, #236]	; (8000b64 <shift_and_scale+0xf4>)
 8000a76:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <shift_and_scale+0xf8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	ee07 3a90 	vmov	s15, r3
 8000a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a86:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ Boost_Measure.shift.inj;
 8000a8a:	4b36      	ldr	r3, [pc, #216]	; (8000b64 <shift_and_scale+0xf4>)
 8000a8c:	edd3 7a08 	vldr	s15, [r3, #32]
 8000a90:	ee77 7a27 	vadd.f32	s15, s14, s15
	Boost_Measure.data.inj = Boost_Measure.scale.inj * ADC_Buffer[0]
 8000a94:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <shift_and_scale+0xf4>)
 8000a96:	edc3 7a01 	vstr	s15, [r3, #4]
	Boost_Measure.data.u2 = Boost_Measure.scale.u2 * ADC_Buffer[1]
 8000a9a:	4b32      	ldr	r3, [pc, #200]	; (8000b64 <shift_and_scale+0xf4>)
 8000a9c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000aa0:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <shift_and_scale+0xf8>)
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	ee07 3a90 	vmov	s15, r3
 8000aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aac:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ Boost_Measure.shift.u2;
 8000ab0:	4b2c      	ldr	r3, [pc, #176]	; (8000b64 <shift_and_scale+0xf4>)
 8000ab2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
	Boost_Measure.data.u2 = Boost_Measure.scale.u2 * ADC_Buffer[1]
 8000aba:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <shift_and_scale+0xf4>)
 8000abc:	edc3 7a02 	vstr	s15, [r3, #8]
	Boost_Measure.data.iL = Boost_Measure.scale.iL * ADC_Buffer[2]
 8000ac0:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <shift_and_scale+0xf4>)
 8000ac2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <shift_and_scale+0xf8>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	ee07 3a90 	vmov	s15, r3
 8000ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ad2:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ Boost_Measure.shift.iL;
 8000ad6:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <shift_and_scale+0xf4>)
 8000ad8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000adc:	ee77 7a27 	vadd.f32	s15, s14, s15
	Boost_Measure.data.iL = Boost_Measure.scale.iL * ADC_Buffer[2]
 8000ae0:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <shift_and_scale+0xf4>)
 8000ae2:	edc3 7a03 	vstr	s15, [r3, #12]
	Boost_Measure.data.temperature = Boost_Measure.scale.temperature
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <shift_and_scale+0xf4>)
 8000ae8:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
			* ADC_Buffer[3] + Boost_Measure.shift.temperature;
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <shift_and_scale+0xf8>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	ee07 3a90 	vmov	s15, r3
 8000af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000af8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <shift_and_scale+0xf4>)
 8000afe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000b02:	ee77 7a27 	vadd.f32	s15, s14, s15
	Boost_Measure.data.temperature = Boost_Measure.scale.temperature
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <shift_and_scale+0xf4>)
 8000b08:	edc3 7a04 	vstr	s15, [r3, #16]
	Boost_Measure.data.u1 = Boost_Measure.scale.u1 * ADC_Buffer[4]
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <shift_and_scale+0xf4>)
 8000b0e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <shift_and_scale+0xf8>)
 8000b14:	691b      	ldr	r3, [r3, #16]
 8000b16:	ee07 3a90 	vmov	s15, r3
 8000b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ Boost_Measure.shift.u1;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <shift_and_scale+0xf4>)
 8000b24:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000b28:	ee77 7a27 	vadd.f32	s15, s14, s15
	Boost_Measure.data.u1 = Boost_Measure.scale.u1 * ADC_Buffer[4]
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <shift_and_scale+0xf4>)
 8000b2e:	edc3 7a05 	vstr	s15, [r3, #20]
	Boost_Measure.data.in = Boost_Measure.scale.in * ADC_Buffer[5]
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <shift_and_scale+0xf4>)
 8000b34:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <shift_and_scale+0xf8>)
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	ee07 3a90 	vmov	s15, r3
 8000b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b44:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ Boost_Measure.shift.in;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <shift_and_scale+0xf4>)
 8000b4a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
	Boost_Measure.data.in = Boost_Measure.scale.in * ADC_Buffer[5]
 8000b52:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <shift_and_scale+0xf4>)
 8000b54:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000068 	.word	0x20000068
 8000b68:	2000011c 	.word	0x2000011c

08000b6c <set_shifts>:

// Функция автоопределения смещения для ацп
void set_shifts(void) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	if (Boost_Measure.count == 0)
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <set_shifts+0x74>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d02e      	beq.n	8000bd6 <set_shifts+0x6a>
		return;

	// Обнуление текущего смещения и суммы при старте алгоритма автоопределения смещения.
	if (Boost_Measure.count == SET_SHIFTS_MAX_COUNT)
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <set_shifts+0x74>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d107      	bne.n	8000b94 <set_shifts+0x28>
		Boost_Measure.shift.inj = Boost_Measure.sum.inj = 0;
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <set_shifts+0x74>)
 8000b86:	f04f 0200 	mov.w	r2, #0
 8000b8a:	659a      	str	r2, [r3, #88]	; 0x58
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <set_shifts+0x74>)
 8000b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <set_shifts+0x74>)
 8000b92:	6213      	str	r3, [r2, #32]

	// Накапливаем сумму.
	Boost_Measure.sum.inj += Boost_Measure.data.inj
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <set_shifts+0x74>)
 8000b96:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <set_shifts+0x74>)
 8000b9c:	edd3 7a01 	vldr	s15, [r3, #4]
			* (1.f / SET_SHIFTS_MAX_COUNT);
 8000ba0:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000be4 <set_shifts+0x78>
 8000ba4:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Boost_Measure.sum.inj += Boost_Measure.data.inj
 8000ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <set_shifts+0x74>)
 8000bae:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

	// Декремент счётчика и проверка окончания автоопределения смещений.
	if (--Boost_Measure.count == 0)
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <set_shifts+0x74>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <set_shifts+0x74>)
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <set_shifts+0x74>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d109      	bne.n	8000bd8 <set_shifts+0x6c>
		Boost_Measure.shift.inj = -Boost_Measure.sum.inj;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <set_shifts+0x74>)
 8000bc6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000bca:	eef1 7a67 	vneg.f32	s15, s15
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <set_shifts+0x74>)
 8000bd0:	edc3 7a08 	vstr	s15, [r3, #32]
 8000bd4:	e000      	b.n	8000bd8 <set_shifts+0x6c>
		return;
 8000bd6:	bf00      	nop
}
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	20000068 	.word	0x20000068
 8000be4:	37a7c5ac 	.word	0x37a7c5ac

08000be8 <protect_software>:

// Функция программных защит
void protect_software(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0

	if (Boost_Measure.data.iL > Boost_Protect.iL_max) {
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <protect_software+0xa4>)
 8000bee:	ed93 7a03 	vldr	s14, [r3, #12]
 8000bf2:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <protect_software+0xa8>)
 8000bf4:	edd3 7a00 	vldr	s15, [r3]
 8000bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c00:	dd07      	ble.n	8000c12 <protect_software+0x2a>
		timer_PWM_Off();
 8000c02:	f001 f88f 	bl	8001d24 <timer_PWM_Off>
		GPIOD->ODR |= 1 << 2;
 8000c06:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <protect_software+0xac>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a22      	ldr	r2, [pc, #136]	; (8000c94 <protect_software+0xac>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	6153      	str	r3, [r2, #20]
	}

	if (Boost_Measure.data.in > Boost_Protect.in_max) {
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <protect_software+0xa4>)
 8000c14:	ed93 7a06 	vldr	s14, [r3, #24]
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <protect_software+0xa8>)
 8000c1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c26:	dd07      	ble.n	8000c38 <protect_software+0x50>
		timer_PWM_Off();
 8000c28:	f001 f87c 	bl	8001d24 <timer_PWM_Off>
		GPIOD->ODR |= 1 << 3;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <protect_software+0xac>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <protect_software+0xac>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	6153      	str	r3, [r2, #20]
	}

	if (Boost_Measure.data.u1 > Boost_Protect.u1_max) {
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <protect_software+0xa4>)
 8000c3a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <protect_software+0xa8>)
 8000c40:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4c:	dd07      	ble.n	8000c5e <protect_software+0x76>
		timer_PWM_Off();
 8000c4e:	f001 f869 	bl	8001d24 <timer_PWM_Off>
		GPIOD->ODR |= 1 << 4;
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <protect_software+0xac>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <protect_software+0xac>)
 8000c58:	f043 0310 	orr.w	r3, r3, #16
 8000c5c:	6153      	str	r3, [r2, #20]
	}

	if (Boost_Measure.data.u2 > Boost_Protect.u2_max) {
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <protect_software+0xa4>)
 8000c60:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <protect_software+0xa8>)
 8000c66:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c72:	dd07      	ble.n	8000c84 <protect_software+0x9c>
		timer_PWM_Off();
 8000c74:	f001 f856 	bl	8001d24 <timer_PWM_Off>
		GPIOD->ODR |= 1 << 5;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <protect_software+0xac>)
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <protect_software+0xac>)
 8000c7e:	f043 0320 	orr.w	r3, r3, #32
 8000c82:	6153      	str	r3, [r2, #20]
	}

	// Интегральная токовая защита
	integral_protect();
 8000c84:	f000 f808 	bl	8000c98 <integral_protect>
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000068 	.word	0x20000068
 8000c90:	200000f4 	.word	0x200000f4
 8000c94:	40020c00 	.word	0x40020c00

08000c98 <integral_protect>:

/**
 * \brief Функция интегрально-токовой защиты по току реактора
 */
void integral_protect(void) {
 8000c98:	b5b0      	push	{r4, r5, r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

	// Разница между током реатора и его номинальным значением
	float x = Boost_Measure.data.iL - Boost_Protect.iL_n;
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <integral_protect+0xb0>)
 8000ca0:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ca4:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <integral_protect+0xb4>)
 8000ca6:	edd3 7a06 	vldr	s15, [r3, #24]
 8000caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cae:	edc7 7a01 	vstr	s15, [r7, #4]

	// Расчёт выхода интегратора
	Boost_Protect.iL_int_sum = Boost_Protect.iL_int_sum + x * TS;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <integral_protect+0xb4>)
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fd34 	bl	8000724 <__aeabi_f2d>
 8000cbc:	4604      	mov	r4, r0
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff fd2f 	bl	8000724 <__aeabi_f2d>
 8000cc6:	a31e      	add	r3, pc, #120	; (adr r3, 8000d40 <integral_protect+0xa8>)
 8000cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ccc:	f7ff fa9c 	bl	8000208 <__aeabi_dmul>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	4629      	mov	r1, r5
 8000cd8:	f7ff fbc6 	bl	8000468 <__adddf3>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f7ff fd76 	bl	80007d4 <__aeabi_d2f>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <integral_protect+0xb4>)
 8000cec:	6113      	str	r3, [r2, #16]

	// Обнуляем интегратор в нормальном режиме работы
	if (Boost_Protect.iL_int_sum < 0)
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <integral_protect+0xb4>)
 8000cf0:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfc:	d503      	bpl.n	8000d06 <integral_protect+0x6e>
		Boost_Protect.iL_int_sum = 0;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <integral_protect+0xb4>)
 8000d00:	f04f 0200 	mov.w	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]

	// Проверяем условие срабаотывания защиты
	if (Boost_Protect.iL_int_sum > Boost_Protect.iL_int_max) {
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <integral_protect+0xb4>)
 8000d08:	ed93 7a04 	vldr	s14, [r3, #16]
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <integral_protect+0xb4>)
 8000d0e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1a:	dc00      	bgt.n	8000d1e <integral_protect+0x86>
		Boost_Protect.iL_int_sum = 0;
		timer_PWM_Off();
		GPIOD->ODR &= ~((1 << 2) | (1 << 3) | (1 << 4) | (1 << 5));

	}
}
 8000d1c:	e00b      	b.n	8000d36 <integral_protect+0x9e>
		Boost_Protect.iL_int_sum = 0;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <integral_protect+0xb4>)
 8000d20:	f04f 0200 	mov.w	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
		timer_PWM_Off();
 8000d26:	f000 fffd 	bl	8001d24 <timer_PWM_Off>
		GPIOD->ODR &= ~((1 << 2) | (1 << 3) | (1 << 4) | (1 << 5));
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <integral_protect+0xb8>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <integral_protect+0xb8>)
 8000d30:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8000d34:	6153      	str	r3, [r2, #20]
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	88e368f1 	.word	0x88e368f1
 8000d44:	3ee4f8b5 	.word	0x3ee4f8b5
 8000d48:	20000068 	.word	0x20000068
 8000d4c:	200000f4 	.word	0x200000f4
 8000d50:	40020c00 	.word	0x40020c00

08000d54 <master_receive>:

/**
 * \brief функция-обработчик входного пакета на стороне ведущего
 */

void master_receive(void) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
	 // Получаем состояние защит
		 uint32_t status = USART1_DATA.buffer_rx[0];
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <master_receive+0x2c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	607b      	str	r3, [r7, #4]

		 if (status){
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <master_receive+0x22>
			 timer_PWM_Off();
 8000d66:	f000 ffdd 	bl	8001d24 <timer_PWM_Off>
			 GPIOD->ODR |= status;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <master_receive+0x30>)
 8000d6c:	695a      	ldr	r2, [r3, #20]
 8000d6e:	4905      	ldr	r1, [pc, #20]	; (8000d84 <master_receive+0x30>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	614b      	str	r3, [r1, #20]
		 }
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20009d9c 	.word	0x20009d9c
 8000d84:	40020c00 	.word	0x40020c00

08000d88 <master_transmit>:

/**
 * \brief Функция для сборки и отправки пакета на стороне ведущего
 */
void master_transmit(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0

	// Записываем значение переменной в буфер отправки.
	// Заполняются элементы массива от 0 до 3.
	*(float*) &USART1_DATA.buffer_tx[0] = REF_CURRENT;
 8000d8e:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <master_transmit+0x54>)
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <master_transmit+0x58>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6013      	str	r3, [r2, #0]
	// Записываем состояние защит в буфер отправки.
	USART1_DATA.buffer_tx[4] = GPIOD->ODR & 0x3E;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <master_transmit+0x5c>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <master_transmit+0x60>)
 8000da4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	// Расчёт CRC-16.
	uint16_t crc = calc_CRC16(USART1_DATA.buffer_tx, 5);
 8000da8:	2105      	movs	r1, #5
 8000daa:	480c      	ldr	r0, [pc, #48]	; (8000ddc <master_transmit+0x54>)
 8000dac:	f000 fa9c 	bl	80012e8 <calc_CRC16>
 8000db0:	4603      	mov	r3, r0
 8000db2:	80fb      	strh	r3, [r7, #6]

	USART1_DATA.buffer_tx[5] = crc & 0xFF;
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <master_transmit+0x60>)
 8000dba:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	USART1_DATA.buffer_tx[6] = crc >> 8;
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <master_transmit+0x60>)
 8000dc8:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

	// Отправляем данные.
	transmit_USART1(7);
 8000dcc:	2007      	movs	r0, #7
 8000dce:	f001 f80d 	bl	8001dec <transmit_USART1>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20009e04 	.word	0x20009e04
 8000de0:	20009d98 	.word	0x20009d98
 8000de4:	40020c00 	.word	0x40020c00
 8000de8:	20009d9c 	.word	0x20009d9c

08000dec <EXTI1_IRQHandler>:
}

/**
 *  \brief Функция обработчик прерывания EXTI1 (1 линия), PB1.
 */
void EXTI1_IRQHandler(void) {
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

	// Сброс флага прерывания EXTI1.
	EXTI->PR |= EXTI_PR_PR1;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <EXTI1_IRQHandler+0x20>)
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <EXTI1_IRQHandler+0x20>)
 8000df6:	f043 0302 	orr.w	r3, r3, #2
 8000dfa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("isb 0xF":::"memory");
 8000dfc:	f3bf 8f6f 	isb	sy
}
 8000e00:	bf00      	nop
	//if(!(GPIOB->IDR & (1<<1)))
	//	timer_PWM_Off();
	//else
	//	timer_PWM_On();

}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	40013c00 	.word	0x40013c00

08000e10 <MovingFloatFilter>:
 * \return		y: среднее значение
 *
 */

float MovingFloatFilter(MovingFloatFilter_Struct * filter, float x)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	ed87 0a00 	vstr	s0, [r7]

	// Отнимаем от суммы [n-1] точку и прибавляем [0] точку
	filter->sum = filter->sum - filter->buf[filter->pointer] + x;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000e22:	f603 4344 	addw	r3, r3, #3140	; 0xc44
 8000e26:	ed93 7a00 	vldr	s14, [r3]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000e30:	f8d3 3c40 	ldr.w	r3, [r3, #3136]	; 0xc40
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	edd3 7a00 	vldr	s15, [r3]
 8000e3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e42:	edd7 7a00 	vldr	s15, [r7]
 8000e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000e50:	f603 4344 	addw	r3, r3, #3140	; 0xc44
 8000e54:	edc3 7a00 	vstr	s15, [r3]

	// Добавляем новую точку в массив точек
	filter->buf[filter->pointer] = x;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000e5e:	f8d3 3c40 	ldr.w	r3, [r3, #3136]	; 0xc40
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	601a      	str	r2, [r3, #0]

	// Инкрементируем указатель (счетчик)
	if (++filter->pointer >= MAX_MOVING_FLOAT_SIZE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000e72:	f8d3 3c40 	ldr.w	r3, [r3, #3136]	; 0xc40
 8000e76:	3301      	adds	r3, #1
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	f502 4210 	add.w	r2, r2, #36864	; 0x9000
 8000e7e:	f8c2 3c40 	str.w	r3, [r2, #3136]	; 0xc40
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000e88:	f8d3 3c40 	ldr.w	r3, [r3, #3136]	; 0xc40
 8000e8c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d906      	bls.n	8000ea2 <MovingFloatFilter+0x92>
		filter->pointer = 0;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c2 3c40 	str.w	r3, [r2, #3136]	; 0xc40

	// Вычисляем среднее значение
	return filter->sum *(1.f / MAX_MOVING_FLOAT_SIZE);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000ea8:	f603 4344 	addw	r3, r3, #3140	; 0xc44
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000ec8 <MovingFloatFilter+0xb8>
 8000eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	38d1b717 	.word	0x38d1b717

08000ecc <Trapezoidal_Integrator>:
 * \brief Функция интегратора методом трапеций
 * \param integrator: структура с параметрами интегратора
 * \param x: вход интегратора
 * \return y: выход интегратора
 */
float Trapezoidal_Integrator(Integrator_Struct *integrator, float x) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	ed87 0a00 	vstr	s0, [r7]

	// y[n] = s[n-1] + x[n]*k
	float out = LIMIT(integrator->sum + integrator->k * x, integrator->sat.min,
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	edd3 6a00 	vldr	s13, [r3]
 8000ee4:	edd7 7a00 	vldr	s15, [r7]
 8000ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efe:	d503      	bpl.n	8000f08 <Trapezoidal_Integrator+0x3c>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f06:	e023      	b.n	8000f50 <Trapezoidal_Integrator+0x84>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	edd3 6a00 	vldr	s13, [r3]
 8000f14:	edd7 7a00 	vldr	s15, [r7]
 8000f18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2e:	dd03      	ble.n	8000f38 <Trapezoidal_Integrator+0x6c>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f36:	e00b      	b.n	8000f50 <Trapezoidal_Integrator+0x84>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	edd3 6a00 	vldr	s13, [r3]
 8000f44:	edd7 7a00 	vldr	s15, [r7]
 8000f48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f50:	edc7 7a03 	vstr	s15, [r7, #12]
			integrator->sat.max);

	// s[n] = y[n] * k
	integrator->sum = out + x * integrator->k;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	ed93 7a00 	vldr	s14, [r3]
 8000f5a:	edd7 7a00 	vldr	s15, [r7]
 8000f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	edc3 7a01 	vstr	s15, [r3, #4]
	return out;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	ee07 3a90 	vmov	s15, r3
}
 8000f76:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <BackwardEuler_Diff>:
 * \brief Функция дифференциатора методом эёлера
 * \param diff: структура с параметрами дифференциатора
 * \param x: вход дифференциатора
 * \return y: выход дифференциатора
 */
float BackwardEuler_Diff(Diff_Struct *diff, float x) {
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	ed87 0a00 	vstr	s0, [r7]

	// y[n] = (x[n] - x[n-1]) * k
	float out = (x - diff->xz) * diff->k;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f96:	ed97 7a00 	vldr	s14, [r7]
 8000f9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa8:	edc7 7a03 	vstr	s15, [r7, #12]

	// Сохнаняем текущее значение х
	diff->xz = x;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
	return out;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	ee07 3a90 	vmov	s15, r3

}
 8000fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <PID_Controller>:

float PID_Controller(PID_Controller_Struct *pid, float x) {
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	ed87 0a00 	vstr	s0, [r7]

	// Расчёт пропорциональной части
	float out_p = x * pid->kp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	edd3 7a00 	vldr	s15, [r3]
 8000fd8:	ed97 7a00 	vldr	s14, [r7]
 8000fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe0:	edc7 7a05 	vstr	s15, [r7, #20]

	// Расчёт интегральной части
	float out_i = Trapezoidal_Integrator(&pid->integrator, x);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3308      	adds	r3, #8
 8000fe8:	ed97 0a00 	vldr	s0, [r7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff6d 	bl	8000ecc <Trapezoidal_Integrator>
 8000ff2:	ed87 0a04 	vstr	s0, [r7, #16]

	// Расчёт дифференциальной части
	float out_d = BackwardEuler_Diff(&pid->diff, x);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	331c      	adds	r3, #28
 8000ffa:	ed97 0a00 	vldr	s0, [r7]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffc0 	bl	8000f84 <BackwardEuler_Diff>
 8001004:	ed87 0a03 	vstr	s0, [r7, #12]
	return LIMIT(out_p + out_i + out_d, pid->sat.min, pid->sat.max);
 8001008:	ed97 7a05 	vldr	s14, [r7, #20]
 800100c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001010:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001014:	edd7 7a03 	vldr	s15, [r7, #12]
 8001018:	ee37 7a27 	vadd.f32	s14, s14, s15
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102a:	d503      	bpl.n	8001034 <PID_Controller+0x6e>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001032:	e01f      	b.n	8001074 <PID_Controller+0xae>
 8001034:	ed97 7a05 	vldr	s14, [r7, #20]
 8001038:	edd7 7a04 	vldr	s15, [r7, #16]
 800103c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001040:	edd7 7a03 	vldr	s15, [r7, #12]
 8001044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800104e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001056:	dd03      	ble.n	8001060 <PID_Controller+0x9a>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800105e:	e009      	b.n	8001074 <PID_Controller+0xae>
 8001060:	ed97 7a05 	vldr	s14, [r7, #20]
 8001064:	edd7 7a04 	vldr	s15, [r7, #16]
 8001068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800106c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001070:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001074:	eeb0 0a67 	vmov.f32	s0, s15
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <main>:
#include "dsp.h"
#include "uart.h"
#include "control.h"
#include "crc.h"

int main(void) {
 8001080:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8001082:	b672      	cpsid	i
	// Global interrupt disable
	__disable_irq();

	init_interrupt();
 8001084:	f000 fb6f 	bl	8001766 <init_interrupt>
	init_RCC();
 8001088:	f000 fcae 	bl	80019e8 <init_RCC>
	init_GPIO();
 800108c:	f000 f9b6 	bl	80013fc <init_GPIO>
	init_dac();
 8001090:	f000 f950 	bl	8001334 <init_dac>
	init_dma();
 8001094:	f000 f966 	bl	8001364 <init_dma>
	init_adc();
 8001098:	f000 f836 	bl	8001108 <init_adc>

	init_timer8();
 800109c:	f000 fdca 	bl	8001c34 <init_timer8>
	init_uart();
 80010a0:	f000 fe50 	bl	8001d44 <init_uart>
	init_CRC();
 80010a4:	f000 f8f4 	bl	8001290 <init_CRC>

#ifdef CONTROL_MASTER
	init_TIMER1();
 80010a8:	f000 fe06 	bl	8001cb8 <init_TIMER1>
#endif

	for (int i = 0; i < 5000; i++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	e000      	b.n	80010b2 <main+0x32>
 80010b0:	3301      	adds	r3, #1
 80010b2:	f241 3287 	movw	r2, #4999	; 0x1387
 80010b6:	4293      	cmp	r3, r2
 80010b8:	ddfa      	ble.n	80010b0 <main+0x30>
  __ASM volatile ("cpsie i" : : : "memory");
 80010ba:	b662      	cpsie	i
}
 80010bc:	e008      	b.n	80010d0 <main+0x50>
		//	;
		//	GPIOD->ODR ^= 1 << 1;

		// Проверяем PB1 (SW1) на ноль.
		if (!(GPIOB->IDR & (1 << 1)))
			Boost_Measure.count = SET_SHIFTS_MAX_COUNT;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <main+0x78>)
 80010c0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80010c4:	601a      	str	r2, [r3, #0]

		// Проверить PB2 (sw2) на ноль
		if (!(GPIOB->IDR & (1 << 2))) {
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <main+0x7c>)
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	f013 0f04 	tst.w	r3, #4
 80010ce:	d005      	beq.n	80010dc <main+0x5c>
		if (!(GPIOB->IDR & (1 << 1)))
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <main+0x7c>)
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	f013 0f02 	tst.w	r3, #2
 80010d8:	d1f5      	bne.n	80010c6 <main+0x46>
 80010da:	e7f0      	b.n	80010be <main+0x3e>
			//extern float REF_CONTROLLER;
			//REF_CONTROLLER = IL_REF1;

			PID_RESET(&Boost_Control.pid_voltage);
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <main+0x80>)
 80010de:	2200      	movs	r2, #0
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44
 80010e2:	659a      	str	r2, [r3, #88]	; 0x58
			PID_RESET(&Boost_Control.pid_current);
 80010e4:	615a      	str	r2, [r3, #20]
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
			timer_PWM_On();
 80010e8:	f000 fe0c 	bl	8001d04 <timer_PWM_On>
			GPIOD->ODR &= ~((1 << 2) | (1 << 3) | (1 << 4) | (1 << 5));
 80010ec:	4a05      	ldr	r2, [pc, #20]	; (8001104 <main+0x84>)
 80010ee:	6953      	ldr	r3, [r2, #20]
 80010f0:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 80010f4:	6153      	str	r3, [r2, #20]
 80010f6:	e7eb      	b.n	80010d0 <main+0x50>
 80010f8:	20000068 	.word	0x20000068
 80010fc:	40020400 	.word	0x40020400
 8001100:	20000000 	.word	0x20000000
 8001104:	40020c00 	.word	0x40020c00

08001108 <init_adc>:
#include "adc.h"
#include "stm32f7xx.h"

void init_adc(void) {
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

	// Вкл тактирования ацп1 2 3
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800110c:	4b5b      	ldr	r3, [pc, #364]	; (800127c <init_adc+0x174>)
 800110e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001110:	4a5a      	ldr	r2, [pc, #360]	; (800127c <init_adc+0x174>)
 8001112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001116:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 8001118:	4b58      	ldr	r3, [pc, #352]	; (800127c <init_adc+0x174>)
 800111a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111c:	4a57      	ldr	r2, [pc, #348]	; (800127c <init_adc+0x174>)
 800111e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001122:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2ENR |= RCC_APB2ENR_ADC3EN;
 8001124:	4b55      	ldr	r3, [pc, #340]	; (800127c <init_adc+0x174>)
 8001126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001128:	4a54      	ldr	r2, [pc, #336]	; (800127c <init_adc+0x174>)
 800112a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112e:	6453      	str	r3, [r2, #68]	; 0x44

	// Вкл ADC1 2 3
	ADC1->CR2 |= ADC_CR2_ADON;
 8001130:	4b53      	ldr	r3, [pc, #332]	; (8001280 <init_adc+0x178>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	4a52      	ldr	r2, [pc, #328]	; (8001280 <init_adc+0x178>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;
 800113c:	4b51      	ldr	r3, [pc, #324]	; (8001284 <init_adc+0x17c>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a50      	ldr	r2, [pc, #320]	; (8001284 <init_adc+0x17c>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_ADON;
 8001148:	4b4f      	ldr	r3, [pc, #316]	; (8001288 <init_adc+0x180>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	4a4e      	ldr	r2, [pc, #312]	; (8001288 <init_adc+0x180>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6093      	str	r3, [r2, #8]

	// Выбор каналов АЦП для первого преобразования
	ADC1->SQR3 |= 3;  // Сигнал инжекции
 8001154:	4b4a      	ldr	r3, [pc, #296]	; (8001280 <init_adc+0x178>)
 8001156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001158:	4a49      	ldr	r2, [pc, #292]	; (8001280 <init_adc+0x178>)
 800115a:	f043 0303 	orr.w	r3, r3, #3
 800115e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= 0;  // Выходное напряжение
 8001160:	4b48      	ldr	r3, [pc, #288]	; (8001284 <init_adc+0x17c>)
 8001162:	4a48      	ldr	r2, [pc, #288]	; (8001284 <init_adc+0x17c>)
 8001164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001166:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= 14; // Ток реактора
 8001168:	4b47      	ldr	r3, [pc, #284]	; (8001288 <init_adc+0x180>)
 800116a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116c:	4a46      	ldr	r2, [pc, #280]	; (8001288 <init_adc+0x180>)
 800116e:	f043 030e 	orr.w	r3, r3, #14
 8001172:	6353      	str	r3, [r2, #52]	; 0x34

	// Выбор каналов АЦП для второго преобразования
	ADC1->SQR3 |= 18 << 5;  // Температура
 8001174:	4b42      	ldr	r3, [pc, #264]	; (8001280 <init_adc+0x178>)
 8001176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001178:	4a41      	ldr	r2, [pc, #260]	; (8001280 <init_adc+0x178>)
 800117a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
 800117e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= 13 << 5;  // Входное напряжение
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <init_adc+0x17c>)
 8001182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001184:	4a3f      	ldr	r2, [pc, #252]	; (8001284 <init_adc+0x17c>)
 8001186:	f443 73d0 	orr.w	r3, r3, #416	; 0x1a0
 800118a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= 12 << 5;  // Выходной ток
 800118c:	4b3e      	ldr	r3, [pc, #248]	; (8001288 <init_adc+0x180>)
 800118e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001190:	4a3d      	ldr	r2, [pc, #244]	; (8001288 <init_adc+0x180>)
 8001192:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8001196:	6353      	str	r3, [r2, #52]	; 0x34

	// Количество преобразований = 2
	ADC1->SQR1 |= 1 << 20;
 8001198:	4b39      	ldr	r3, [pc, #228]	; (8001280 <init_adc+0x178>)
 800119a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119c:	4a38      	ldr	r2, [pc, #224]	; (8001280 <init_adc+0x178>)
 800119e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011a2:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC2->SQR1 |= 1 << 20;
 80011a4:	4b37      	ldr	r3, [pc, #220]	; (8001284 <init_adc+0x17c>)
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	4a36      	ldr	r2, [pc, #216]	; (8001284 <init_adc+0x17c>)
 80011aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011ae:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC3->SQR1 |= 1 << 20;
 80011b0:	4b35      	ldr	r3, [pc, #212]	; (8001288 <init_adc+0x180>)
 80011b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b4:	4a34      	ldr	r2, [pc, #208]	; (8001288 <init_adc+0x180>)
 80011b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011ba:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Включение режима сканирвания
	ADC1->CR1 |= ADC_CR1_SCAN;
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <init_adc+0x178>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4a2f      	ldr	r2, [pc, #188]	; (8001280 <init_adc+0x178>)
 80011c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c6:	6053      	str	r3, [r2, #4]
	ADC2->CR1 |= ADC_CR1_SCAN;
 80011c8:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <init_adc+0x17c>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a2d      	ldr	r2, [pc, #180]	; (8001284 <init_adc+0x17c>)
 80011ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d2:	6053      	str	r3, [r2, #4]
	ADC3->CR1 |= ADC_CR1_SCAN;
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <init_adc+0x180>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4a2b      	ldr	r2, [pc, #172]	; (8001288 <init_adc+0x180>)
 80011da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011de:	6053      	str	r3, [r2, #4]

	// Устанавливаем период выборки равным 15 циклов
	ADC1->SMPR1 |= ADC_SMPR1_SMP18_0;
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <init_adc+0x178>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	4a26      	ldr	r2, [pc, #152]	; (8001280 <init_adc+0x178>)
 80011e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011ea:	60d3      	str	r3, [r2, #12]
	ADC1->SMPR2 |= ADC_SMPR2_SMP3_0;
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <init_adc+0x178>)
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4a23      	ldr	r2, [pc, #140]	; (8001280 <init_adc+0x178>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f6:	6113      	str	r3, [r2, #16]

	ADC2->SMPR2 |= ADC_SMPR2_SMP0_0;
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <init_adc+0x17c>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	4a21      	ldr	r2, [pc, #132]	; (8001284 <init_adc+0x17c>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6113      	str	r3, [r2, #16]
	ADC2->SMPR1 |= ADC_SMPR1_SMP13_0;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <init_adc+0x17c>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <init_adc+0x17c>)
 800120a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120e:	60d3      	str	r3, [r2, #12]

	ADC3->SMPR1 |= ADC_SMPR1_SMP14_0;
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <init_adc+0x180>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <init_adc+0x180>)
 8001216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800121a:	60d3      	str	r3, [r2, #12]
	ADC3->SMPR1 |= ADC_SMPR1_SMP12_0;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <init_adc+0x180>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4a19      	ldr	r2, [pc, #100]	; (8001288 <init_adc+0x180>)
 8001222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001226:	60d3      	str	r3, [r2, #12]

	// Вкл запуска АЦП от TIM8 TRGO
	ADC1->CR2 |=ADC_CR2_EXTSEL_0 | ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <init_adc+0x178>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4a14      	ldr	r2, [pc, #80]	; (8001280 <init_adc+0x178>)
 800122e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001232:	6093      	str	r3, [r2, #8]

	// Запуск по нарастающему фронту
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <init_adc+0x178>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4a11      	ldr	r2, [pc, #68]	; (8001280 <init_adc+0x178>)
 800123a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123e:	6093      	str	r3, [r2, #8]

	// Включение датчика температуры
	ADC->CCR |= ADC_CCR_TSVREFE;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <init_adc+0x184>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4a11      	ldr	r2, [pc, #68]	; (800128c <init_adc+0x184>)
 8001246:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800124a:	6053      	str	r3, [r2, #4]

	// Режим работы АЦП с ДМА 1
	ADC->CCR |= ADC_CCR_DMA_0;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <init_adc+0x184>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <init_adc+0x184>)
 8001252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001256:	6053      	str	r3, [r2, #4]

	// Вкл. запуск запросов к DMA по окончанию преобразований
	ADC->CCR |= ADC_CCR_DDS;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <init_adc+0x184>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	4a0b      	ldr	r2, [pc, #44]	; (800128c <init_adc+0x184>)
 800125e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001262:	6053      	str	r3, [r2, #4]

	// Тройное преобразование
	ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2 | ADC_CCR_MULTI_4;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <init_adc+0x184>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	4a08      	ldr	r2, [pc, #32]	; (800128c <init_adc+0x184>)
 800126a:	f043 0316 	orr.w	r3, r3, #22
 800126e:	6053      	str	r3, [r2, #4]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40012000 	.word	0x40012000
 8001284:	40012100 	.word	0x40012100
 8001288:	40012200 	.word	0x40012200
 800128c:	40012300 	.word	0x40012300

08001290 <init_CRC>:

#include "stm32f7xx.h"
#include "crc.h"

void init_CRC(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
    // Вкл. тактирование модуля CRC.
    RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <init_CRC+0x50>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <init_CRC+0x50>)
 800129a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800129e:	6313      	str	r3, [r2, #48]	; 0x30

    // Битность алгоритма (полинома) = 16 бит.
    CRC->CR |= CRC_CR_POLYSIZE_0;
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <init_CRC+0x54>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <init_CRC+0x54>)
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	6093      	str	r3, [r2, #8]

    // Инверсия выходных данных.
    CRC->CR |= CRC_CR_REV_OUT;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <init_CRC+0x54>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <init_CRC+0x54>)
 80012b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b6:	6093      	str	r3, [r2, #8]

    // Инверсия входных данных по байтам.
    CRC->CR |= CRC_CR_REV_IN_0;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <init_CRC+0x54>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	4a09      	ldr	r2, [pc, #36]	; (80012e4 <init_CRC+0x54>)
 80012be:	f043 0320 	orr.w	r3, r3, #32
 80012c2:	6093      	str	r3, [r2, #8]

    // Начальное значение CRC.
    CRC->INIT = 0xFFFF;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <init_CRC+0x54>)
 80012c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ca:	611a      	str	r2, [r3, #16]

    // Коэффициенты полинома.
    CRC->POL = 0x8005;
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <init_CRC+0x54>)
 80012ce:	f248 0205 	movw	r2, #32773	; 0x8005
 80012d2:	615a      	str	r2, [r3, #20]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40023000 	.word	0x40023000

080012e8 <calc_CRC16>:
 * \return  crc: значение CRC.
 *
 */

uint16_t calc_CRC16(uint8_t *data, uint32_t size)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    // Сброс CRC.
    CRC->CR |= CRC_CR_RESET;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <calc_CRC16+0x48>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <calc_CRC16+0x48>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6093      	str	r3, [r2, #8]

    // Расчёт CRC.
    for (int i = 0; i < size; i++)
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	e008      	b.n	8001316 <calc_CRC16+0x2e>
        *(__IO uint8_t *)&CRC->DR = data[i];
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	4a09      	ldr	r2, [pc, #36]	; (8001330 <calc_CRC16+0x48>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < size; i++)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	3301      	adds	r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d8f2      	bhi.n	8001304 <calc_CRC16+0x1c>

    return CRC->DR;
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <calc_CRC16+0x48>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40023000 	.word	0x40023000

08001334 <init_dac>:
#include "stm32f7xx.h"
#include "dac.h"

void init_dac(void){
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

	// Вкл тактирование ЦАП
	RCC ->APB1ENR |= RCC_APB1ENR_DACEN;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <init_dac+0x28>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <init_dac+0x28>)
 800133e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001342:	6413      	str	r3, [r2, #64]	; 0x40

	// Вкл цап 1 и 2
	DAC->CR |= DAC_CR_EN1 | DAC_CR_EN2;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <init_dac+0x2c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a05      	ldr	r2, [pc, #20]	; (8001360 <init_dac+0x2c>)
 800134a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40007400 	.word	0x40007400

08001364 <init_dma>:
#include "dma.h"
#include "stm32f7xx.h"

volatile unsigned int ADC_Buffer[6] __attribute((section(".adc_buf")));

void init_dma(void) {
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

	// Тактирование DMA 2
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <init_dma+0x88>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <init_dma+0x88>)
 800136e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001372:	6313      	str	r3, [r2, #48]	; 0x30

	// Настраиваем адрес источника данных
	DMA2_Stream0->PAR = (unsigned int) &(ADC->CDR);
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <init_dma+0x8c>)
 8001376:	4a1f      	ldr	r2, [pc, #124]	; (80013f4 <init_dma+0x90>)
 8001378:	609a      	str	r2, [r3, #8]

	// Настраиваем адрес места назначения (массив)
	DMA2_Stream0->M0AR = (unsigned int) &ADC_Buffer[0];
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <init_dma+0x8c>)
 800137c:	4a1e      	ldr	r2, [pc, #120]	; (80013f8 <init_dma+0x94>)
 800137e:	60da      	str	r2, [r3, #12]

	// Количество пересылаемых данных
	DMA2_Stream0->NDTR = 6;
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <init_dma+0x8c>)
 8001382:	2206      	movs	r2, #6
 8001384:	605a      	str	r2, [r3, #4]

	// Выбираем канал 0
	DMA2_Stream0->CR |= 0 << 25;
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <init_dma+0x8c>)
 8001388:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <init_dma+0x8c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6013      	str	r3, [r2, #0]

	// Установка приоритета при выборе потоков DMA для передачи по шине данных = very high
	DMA2_Stream0->CR |= DMA_SxCR_PL_0 | DMA_SxCR_PL_1;
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <init_dma+0x8c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <init_dma+0x8c>)
 8001394:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001398:	6013      	str	r3, [r2, #0]

	// Размер данных в источнике (АЦП) = 32 бита
	DMA2_Stream0->CR |= DMA_SxCR_PSIZE_1;
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <init_dma+0x8c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <init_dma+0x8c>)
 80013a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a4:	6013      	str	r3, [r2, #0]

	// Размер данных в месте назначения (массив) = 32 бита
	DMA2_Stream0->CR |= DMA_SxCR_MSIZE_1;
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <init_dma+0x8c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <init_dma+0x8c>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b0:	6013      	str	r3, [r2, #0]

	// Включение инкримента адреса в месте назначения
	DMA2_Stream0->CR |= DMA_SxCR_MINC;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <init_dma+0x8c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <init_dma+0x8c>)
 80013b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013bc:	6013      	str	r3, [r2, #0]

	// Включение циклической передачи
	DMA2_Stream0->CR |= DMA_SxCR_CIRC;
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <init_dma+0x8c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <init_dma+0x8c>)
 80013c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c8:	6013      	str	r3, [r2, #0]

	// Прерывание по окончанию преобразования
	DMA2_Stream0->CR |= DMA_SxCR_TCIE;
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <init_dma+0x8c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <init_dma+0x8c>)
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	6013      	str	r3, [r2, #0]

	// Вкл  DMA
	DMA2_Stream0->CR |= DMA_SxCR_EN;
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <init_dma+0x8c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <init_dma+0x8c>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6013      	str	r3, [r2, #0]



}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40026410 	.word	0x40026410
 80013f4:	40012308 	.word	0x40012308
 80013f8:	2000011c 	.word	0x2000011c

080013fc <init_GPIO>:
#include "stm32f7xx.h"
void init_GPIO_Output(GPIO_TypeDef *gpio, unsigned int pin);
void init_GPIO_AFunction(GPIO_TypeDef *gpio, unsigned int pin, unsigned int AF);
void init_GPIO_Analog(GPIO_TypeDef * gpio, unsigned int pin);

void init_GPIO(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8001400:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <init_GPIO+0x13c>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	4a4c      	ldr	r2, [pc, #304]	; (8001538 <init_GPIO+0x13c>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800140c:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <init_GPIO+0x13c>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4a49      	ldr	r2, [pc, #292]	; (8001538 <init_GPIO+0x13c>)
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001418:	4b47      	ldr	r3, [pc, #284]	; (8001538 <init_GPIO+0x13c>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4a46      	ldr	r2, [pc, #280]	; (8001538 <init_GPIO+0x13c>)
 800141e:	f043 0302 	orr.w	r3, r3, #2
 8001422:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001424:	4b44      	ldr	r3, [pc, #272]	; (8001538 <init_GPIO+0x13c>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	4a43      	ldr	r2, [pc, #268]	; (8001538 <init_GPIO+0x13c>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;
 8001430:	4b41      	ldr	r3, [pc, #260]	; (8001538 <init_GPIO+0x13c>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	4a40      	ldr	r2, [pc, #256]	; (8001538 <init_GPIO+0x13c>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 800143c:	4b3e      	ldr	r3, [pc, #248]	; (8001538 <init_GPIO+0x13c>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	4a3d      	ldr	r2, [pc, #244]	; (8001538 <init_GPIO+0x13c>)
 8001442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001446:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001448:	4b3b      	ldr	r3, [pc, #236]	; (8001538 <init_GPIO+0x13c>)
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	4a3a      	ldr	r2, [pc, #232]	; (8001538 <init_GPIO+0x13c>)
 800144e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001452:	6453      	str	r3, [r2, #68]	; 0x44

	// Светодиоды
	init_GPIO_Output(GPIOD, 1); 	// HL1
 8001454:	2101      	movs	r1, #1
 8001456:	4839      	ldr	r0, [pc, #228]	; (800153c <init_GPIO+0x140>)
 8001458:	f000 f87e 	bl	8001558 <init_GPIO_Output>
	init_GPIO_Output(GPIOD, 2); 	// HL2
 800145c:	2102      	movs	r1, #2
 800145e:	4837      	ldr	r0, [pc, #220]	; (800153c <init_GPIO+0x140>)
 8001460:	f000 f87a 	bl	8001558 <init_GPIO_Output>
	init_GPIO_Output(GPIOD, 3); 	// HL3
 8001464:	2103      	movs	r1, #3
 8001466:	4835      	ldr	r0, [pc, #212]	; (800153c <init_GPIO+0x140>)
 8001468:	f000 f876 	bl	8001558 <init_GPIO_Output>
	init_GPIO_Output(GPIOD, 4); 	// HL4
 800146c:	2104      	movs	r1, #4
 800146e:	4833      	ldr	r0, [pc, #204]	; (800153c <init_GPIO+0x140>)
 8001470:	f000 f872 	bl	8001558 <init_GPIO_Output>
	init_GPIO_Output(GPIOD, 5); 	// HL5
 8001474:	2105      	movs	r1, #5
 8001476:	4831      	ldr	r0, [pc, #196]	; (800153c <init_GPIO+0x140>)
 8001478:	f000 f86e 	bl	8001558 <init_GPIO_Output>

	// Тестовые выводы
	init_GPIO_Output(GPIOD, 6);
 800147c:	2106      	movs	r1, #6
 800147e:	482f      	ldr	r0, [pc, #188]	; (800153c <init_GPIO+0x140>)
 8001480:	f000 f86a 	bl	8001558 <init_GPIO_Output>
	init_GPIO_Output(GPIOD, 7);
 8001484:	2107      	movs	r1, #7
 8001486:	482d      	ldr	r0, [pc, #180]	; (800153c <init_GPIO+0x140>)
 8001488:	f000 f866 	bl	8001558 <init_GPIO_Output>
	init_GPIO_Output(GPIOG, 9);
 800148c:	2109      	movs	r1, #9
 800148e:	482c      	ldr	r0, [pc, #176]	; (8001540 <init_GPIO+0x144>)
 8001490:	f000 f862 	bl	8001558 <init_GPIO_Output>
	init_GPIO_Output(GPIOG, 10);
 8001494:	210a      	movs	r1, #10
 8001496:	482a      	ldr	r0, [pc, #168]	; (8001540 <init_GPIO+0x144>)
 8001498:	f000 f85e 	bl	8001558 <init_GPIO_Output>
	init_GPIO_Output(GPIOG, 11);
 800149c:	210b      	movs	r1, #11
 800149e:	4828      	ldr	r0, [pc, #160]	; (8001540 <init_GPIO+0x144>)
 80014a0:	f000 f85a 	bl	8001558 <init_GPIO_Output>


	// Выход TIM8 CH1
	init_GPIO_AFunction(GPIOC, 6, 3);
 80014a4:	2203      	movs	r2, #3
 80014a6:	2106      	movs	r1, #6
 80014a8:	4826      	ldr	r0, [pc, #152]	; (8001544 <init_GPIO+0x148>)
 80014aa:	f000 f86a 	bl	8001582 <init_GPIO_AFunction>

	init_GPIO_Analog(GPIOA, 0); 	// Выходное напряжение
 80014ae:	2100      	movs	r1, #0
 80014b0:	4825      	ldr	r0, [pc, #148]	; (8001548 <init_GPIO+0x14c>)
 80014b2:	f000 f895 	bl	80015e0 <init_GPIO_Analog>
	init_GPIO_Analog(GPIOC, 2); 	// Выходной ток
 80014b6:	2102      	movs	r1, #2
 80014b8:	4822      	ldr	r0, [pc, #136]	; (8001544 <init_GPIO+0x148>)
 80014ba:	f000 f891 	bl	80015e0 <init_GPIO_Analog>
	init_GPIO_Analog(GPIOC, 3); 	// Входное напряжение
 80014be:	2103      	movs	r1, #3
 80014c0:	4820      	ldr	r0, [pc, #128]	; (8001544 <init_GPIO+0x148>)
 80014c2:	f000 f88d 	bl	80015e0 <init_GPIO_Analog>
	init_GPIO_Analog(GPIOF, 4); 	// Ток дросселя
 80014c6:	2104      	movs	r1, #4
 80014c8:	4820      	ldr	r0, [pc, #128]	; (800154c <init_GPIO+0x150>)
 80014ca:	f000 f889 	bl	80015e0 <init_GPIO_Analog>
	init_GPIO_Analog(GPIOA, 3); 	// Сигнал инжекции
 80014ce:	2103      	movs	r1, #3
 80014d0:	481d      	ldr	r0, [pc, #116]	; (8001548 <init_GPIO+0x14c>)
 80014d2:	f000 f885 	bl	80015e0 <init_GPIO_Analog>

	init_GPIO_Analog(GPIOA, 4); 	// ЦАП1
 80014d6:	2104      	movs	r1, #4
 80014d8:	481b      	ldr	r0, [pc, #108]	; (8001548 <init_GPIO+0x14c>)
 80014da:	f000 f881 	bl	80015e0 <init_GPIO_Analog>
	init_GPIO_Analog(GPIOA, 5);		// ЦАП2
 80014de:	2105      	movs	r1, #5
 80014e0:	4819      	ldr	r0, [pc, #100]	; (8001548 <init_GPIO+0x14c>)
 80014e2:	f000 f87d 	bl	80015e0 <init_GPIO_Analog>

	SYSCFG->EXTICR[0] |= 1 << 4;	// Настраиваем PB1 на внешниее прерывание
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <init_GPIO+0x154>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	4a19      	ldr	r2, [pc, #100]	; (8001550 <init_GPIO+0x154>)
 80014ec:	f043 0310 	orr.w	r3, r3, #16
 80014f0:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_IM1; 		//Значение прерывания по линии 1 (PB1)
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <init_GPIO+0x158>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a17      	ldr	r2, [pc, #92]	; (8001554 <init_GPIO+0x158>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR1; 	// Прерывание по срезу
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <init_GPIO+0x158>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	4a14      	ldr	r2, [pc, #80]	; (8001554 <init_GPIO+0x158>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR |= EXTI_RTSR_TR1; 	// Прерывание по фронту
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <init_GPIO+0x158>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	4a11      	ldr	r2, [pc, #68]	; (8001554 <init_GPIO+0x158>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6093      	str	r3, [r2, #8]


	// Выводы UART
	init_GPIO_AFunction(GPIOA, 9, 7);  // TX
 8001516:	2207      	movs	r2, #7
 8001518:	2109      	movs	r1, #9
 800151a:	480b      	ldr	r0, [pc, #44]	; (8001548 <init_GPIO+0x14c>)
 800151c:	f000 f831 	bl	8001582 <init_GPIO_AFunction>
	init_GPIO_AFunction(GPIOA, 10, 7); // RX
 8001520:	2207      	movs	r2, #7
 8001522:	210a      	movs	r1, #10
 8001524:	4808      	ldr	r0, [pc, #32]	; (8001548 <init_GPIO+0x14c>)
 8001526:	f000 f82c 	bl	8001582 <init_GPIO_AFunction>
	init_GPIO_AFunction(GPIOA, 12, 7); // DE
 800152a:	2207      	movs	r2, #7
 800152c:	210c      	movs	r1, #12
 800152e:	4806      	ldr	r0, [pc, #24]	; (8001548 <init_GPIO+0x14c>)
 8001530:	f000 f827 	bl	8001582 <init_GPIO_AFunction>

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	40020c00 	.word	0x40020c00
 8001540:	40021800 	.word	0x40021800
 8001544:	40020800 	.word	0x40020800
 8001548:	40020000 	.word	0x40020000
 800154c:	40021400 	.word	0x40021400
 8001550:	40013800 	.word	0x40013800
 8001554:	40013c00 	.word	0x40013c00

08001558 <init_GPIO_Output>:

void init_GPIO_Output(GPIO_TypeDef *gpio, unsigned int pin) {
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]

	gpio->MODER |= 1 << (2 * pin);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	0052      	lsls	r2, r2, #1
 800156a:	2101      	movs	r1, #1
 800156c:	fa01 f202 	lsl.w	r2, r1, r2
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	601a      	str	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <init_GPIO_AFunction>:

void init_GPIO_AFunction(GPIO_TypeDef *gpio, unsigned int pin, unsigned int AF) {
 8001582:	b480      	push	{r7}
 8001584:	b085      	sub	sp, #20
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
	if (pin < 8)
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2b07      	cmp	r3, #7
 8001592:	d80a      	bhi.n	80015aa <init_GPIO_AFunction+0x28>
		gpio->AFR[0] |= AF << (4 * pin);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6a1a      	ldr	r2, [r3, #32]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	431a      	orrs	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	621a      	str	r2, [r3, #32]
 80015a8:	e00a      	b.n	80015c0 <init_GPIO_AFunction+0x3e>
	else
		gpio->AFR[1] |= AF << (4 * (pin - 8));
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	3b08      	subs	r3, #8
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	431a      	orrs	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
	gpio->MODER |= 2 << (2 * pin);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	0052      	lsls	r2, r2, #1
 80015c8:	2102      	movs	r1, #2
 80015ca:	fa01 f202 	lsl.w	r2, r1, r2
 80015ce:	431a      	orrs	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	601a      	str	r2, [r3, #0]

}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <init_GPIO_Analog>:

void init_GPIO_Analog(GPIO_TypeDef *gpio, unsigned int pin) {
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]

	gpio->MODER |= 3 << (2 * pin);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	0052      	lsls	r2, r2, #1
 80015f2:	2103      	movs	r1, #3
 80015f4:	fa01 f202 	lsl.w	r2, r1, r2
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	601a      	str	r2, [r3, #0]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <__NVIC_SetPriorityGrouping+0x40>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	4313      	orrs	r3, r2
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <__NVIC_SetPriorityGrouping+0x40>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00
 8001650:	05fa0000 	.word	0x05fa0000

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db0b      	blt.n	800169a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	4907      	ldr	r1, [pc, #28]	; (80016a8 <__NVIC_EnableIRQ+0x38>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e100 	.word	0xe000e100

080016ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	6039      	str	r1, [r7, #0]
 80016b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	db0a      	blt.n	80016d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	490c      	ldr	r1, [pc, #48]	; (80016f8 <__NVIC_SetPriority+0x4c>)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	0112      	lsls	r2, r2, #4
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	440b      	add	r3, r1
 80016d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d4:	e00a      	b.n	80016ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4908      	ldr	r1, [pc, #32]	; (80016fc <__NVIC_SetPriority+0x50>)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	3b04      	subs	r3, #4
 80016e4:	0112      	lsls	r2, r2, #4
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	440b      	add	r3, r1
 80016ea:	761a      	strb	r2, [r3, #24]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000e100 	.word	0xe000e100
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f1c3 0307 	rsb	r3, r3, #7
 800171a:	2b04      	cmp	r3, #4
 800171c:	bf28      	it	cs
 800171e:	2304      	movcs	r3, #4
 8001720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3304      	adds	r3, #4
 8001726:	2b06      	cmp	r3, #6
 8001728:	d902      	bls.n	8001730 <NVIC_EncodePriority+0x30>
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3b03      	subs	r3, #3
 800172e:	e000      	b.n	8001732 <NVIC_EncodePriority+0x32>
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	f04f 32ff 	mov.w	r2, #4294967295
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	401a      	ands	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001748:	f04f 31ff 	mov.w	r1, #4294967295
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	43d9      	mvns	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	4313      	orrs	r3, r2
         );
}
 800175a:	4618      	mov	r0, r3
 800175c:	3724      	adds	r7, #36	; 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <init_interrupt>:
#include "crc.h"




void init_interrupt(void) {
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0

	// Выбор варианта прерывания 3(16 групп по 16 прерываний)
	NVIC_SetPriorityGrouping(3);
 800176a:	2003      	movs	r0, #3
 800176c:	f7ff ff4e 	bl	800160c <__NVIC_SetPriorityGrouping>

	// Установка приоритет прерыванийя TIM8_UP_TIM13: группа 3, приоритет 1
	NVIC_SetPriority(TIM1_UP_TIM10_IRQn,
 8001770:	f7ff ff70 	bl	8001654 <__NVIC_GetPriorityGrouping>
 8001774:	4603      	mov	r3, r0
 8001776:	2202      	movs	r2, #2
 8001778:	2103      	movs	r1, #3
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ffc0 	bl	8001700 <NVIC_EncodePriority>
 8001780:	4603      	mov	r3, r0
 8001782:	4619      	mov	r1, r3
 8001784:	2019      	movs	r0, #25
 8001786:	f7ff ff91 	bl	80016ac <__NVIC_SetPriority>
	NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 3, 2));

	// Включаем прерывание TIM1_UP_TIM10 в NVIC
	NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800178a:	2019      	movs	r0, #25
 800178c:	f7ff ff70 	bl	8001670 <__NVIC_EnableIRQ>

	// Установка приоритет прерыванийя
	NVIC_SetPriority(DMA2_Stream0_IRQn,
 8001790:	f7ff ff60 	bl	8001654 <__NVIC_GetPriorityGrouping>
 8001794:	4603      	mov	r3, r0
 8001796:	2201      	movs	r2, #1
 8001798:	2102      	movs	r1, #2
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ffb0 	bl	8001700 <NVIC_EncodePriority>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4619      	mov	r1, r3
 80017a4:	2038      	movs	r0, #56	; 0x38
 80017a6:	f7ff ff81 	bl	80016ac <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 2, 1));

	//
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017aa:	2038      	movs	r0, #56	; 0x38
 80017ac:	f7ff ff60 	bl	8001670 <__NVIC_EnableIRQ>

	// Установка приоритет прерывания группа 1 приоритет1
	NVIC_SetPriority(EXTI1_IRQn,
 80017b0:	f7ff ff50 	bl	8001654 <__NVIC_GetPriorityGrouping>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2201      	movs	r2, #1
 80017b8:	2101      	movs	r1, #1
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ffa0 	bl	8001700 <NVIC_EncodePriority>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4619      	mov	r1, r3
 80017c4:	2007      	movs	r0, #7
 80017c6:	f7ff ff71 	bl	80016ac <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 1));


	// Вкл прерывание EXTI1_IRQn
	NVIC_EnableIRQ(EXTI1_IRQn);
 80017ca:	2007      	movs	r0, #7
 80017cc:	f7ff ff50 	bl	8001670 <__NVIC_EnableIRQ>

	// Установка приоритет прерывания группа 1 приоритет1
	NVIC_SetPriority(USART1_IRQn,
 80017d0:	f7ff ff40 	bl	8001654 <__NVIC_GetPriorityGrouping>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2201      	movs	r2, #1
 80017d8:	2103      	movs	r1, #3
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff90 	bl	8001700 <NVIC_EncodePriority>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4619      	mov	r1, r3
 80017e4:	2025      	movs	r0, #37	; 0x25
 80017e6:	f7ff ff61 	bl	80016ac <__NVIC_SetPriority>
				NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 3, 1));

		// Вкл прерывание EXTI1_IRQn
	NVIC_EnableIRQ(USART1_IRQn);
 80017ea:	2025      	movs	r0, #37	; 0x25
 80017ec:	f7ff ff40 	bl	8001670 <__NVIC_EnableIRQ>
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

	TIM1->SR &= ~TIM_SR_UIF; // Сброс фалага прерывания
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <TIM1_UP_TIM10_IRQHandler+0x20>)
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	4a05      	ldr	r2, [pc, #20]	; (8001814 <TIM1_UP_TIM10_IRQHandler+0x20>)
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	6113      	str	r3, [r2, #16]
  __ASM volatile ("isb 0xF":::"memory");
 8001804:	f3bf 8f6f 	isb	sy
}
 8001808:	bf00      	nop
	__ISB(); // Ожидание выполнения всех инструкций в конвейере(pipeline)

	master_transmit();
 800180a:	f7ff fabd 	bl	8000d88 <master_transmit>

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40010000 	.word	0x40010000

08001818 <USART1_IRQHandler>:



void USART1_IRQHandler()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
    // Прерывание по приёму одного байта.
    if ((USART1->ISR & USART_ISR_RXNE) && (USART1->CR1 & USART_CR1_RXNEIE))
 800181e:	4b50      	ldr	r3, [pc, #320]	; (8001960 <USART1_IRQHandler+0x148>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f003 0320 	and.w	r3, r3, #32
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00f      	beq.n	800184a <USART1_IRQHandler+0x32>
 800182a:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <USART1_IRQHandler+0x148>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <USART1_IRQHandler+0x32>
    {
        // Приём одного байта.
    	USART1_DATA.buffer_rx[USART1_DATA.counter_rx++] = USART1->RDR;
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <USART1_IRQHandler+0x148>)
 8001838:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800183a:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <USART1_IRQHandler+0x14c>)
 800183c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	4948      	ldr	r1, [pc, #288]	; (8001964 <USART1_IRQHandler+0x14c>)
 8001842:	664a      	str	r2, [r1, #100]	; 0x64
 8001844:	b2c1      	uxtb	r1, r0
 8001846:	4a47      	ldr	r2, [pc, #284]	; (8001964 <USART1_IRQHandler+0x14c>)
 8001848:	54d1      	strb	r1, [r2, r3]
    }

    // Прерывание, когда TDR пуст и можно отправлять новый байт.
    if ((USART1->ISR & USART_ISR_TXE) && (USART1->CR1 & USART_CR1_TXEIE))
 800184a:	4b45      	ldr	r3, [pc, #276]	; (8001960 <USART1_IRQHandler+0x148>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001852:	2b00      	cmp	r3, #0
 8001854:	d026      	beq.n	80018a4 <USART1_IRQHandler+0x8c>
 8001856:	4b42      	ldr	r3, [pc, #264]	; (8001960 <USART1_IRQHandler+0x148>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185e:	2b00      	cmp	r3, #0
 8001860:	d020      	beq.n	80018a4 <USART1_IRQHandler+0x8c>
    {
        // Передача одного байта.
        USART1->TDR = USART1_DATA.buffer_tx[USART1_DATA.counter_tx++];
 8001862:	4b40      	ldr	r3, [pc, #256]	; (8001964 <USART1_IRQHandler+0x14c>)
 8001864:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	493e      	ldr	r1, [pc, #248]	; (8001964 <USART1_IRQHandler+0x14c>)
 800186c:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8001870:	4a3c      	ldr	r2, [pc, #240]	; (8001964 <USART1_IRQHandler+0x14c>)
 8001872:	4413      	add	r3, r2
 8001874:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8001878:	4b39      	ldr	r3, [pc, #228]	; (8001960 <USART1_IRQHandler+0x148>)
 800187a:	629a      	str	r2, [r3, #40]	; 0x28

        // Если передали всё, что нужно...
        if (USART1_DATA.counter_tx >= USART1_DATA.size_tx)
 800187c:	4b39      	ldr	r3, [pc, #228]	; (8001964 <USART1_IRQHandler+0x14c>)
 800187e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8001882:	4b38      	ldr	r3, [pc, #224]	; (8001964 <USART1_IRQHandler+0x14c>)
 8001884:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001888:	429a      	cmp	r2, r3
 800188a:	d30b      	bcc.n	80018a4 <USART1_IRQHandler+0x8c>
        {
            // Выключаем прерывание по свободному TDR.
            USART1->CR1 &= ~USART_CR1_TXEIE;
 800188c:	4b34      	ldr	r3, [pc, #208]	; (8001960 <USART1_IRQHandler+0x148>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a33      	ldr	r2, [pc, #204]	; (8001960 <USART1_IRQHandler+0x148>)
 8001892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001896:	6013      	str	r3, [r2, #0]

            // Включаем прерывание по окончанию передачи.
            USART1->CR1 |= USART_CR1_TCIE;
 8001898:	4b31      	ldr	r3, [pc, #196]	; (8001960 <USART1_IRQHandler+0x148>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a30      	ldr	r2, [pc, #192]	; (8001960 <USART1_IRQHandler+0x148>)
 800189e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a2:	6013      	str	r3, [r2, #0]
        }
    }
    if (USART1->ISR & USART_ISR_RTOF)
 80018a4:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <USART1_IRQHandler+0x148>)
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d032      	beq.n	8001916 <USART1_IRQHandler+0xfe>
        {
            // Очищаем соответствующий бит статуса UART.
            USART1->ICR |= USART_ICR_RTOCF;
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <USART1_IRQHandler+0x148>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4a2a      	ldr	r2, [pc, #168]	; (8001960 <USART1_IRQHandler+0x148>)
 80018b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018ba:	6213      	str	r3, [r2, #32]

            if(USART1_DATA.counter_tx > 2)
 80018bc:	4b29      	ldr	r3, [pc, #164]	; (8001964 <USART1_IRQHandler+0x14c>)
 80018be:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d924      	bls.n	8001910 <USART1_IRQHandler+0xf8>
            {

            // Расчёт CRC-16.
            uint16_t crc = calc_CRC16(USART1_DATA.buffer_rx, USART1_DATA.counter_rx - 2);
 80018c6:	4b27      	ldr	r3, [pc, #156]	; (8001964 <USART1_IRQHandler+0x14c>)
 80018c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018ca:	3b02      	subs	r3, #2
 80018cc:	4619      	mov	r1, r3
 80018ce:	4825      	ldr	r0, [pc, #148]	; (8001964 <USART1_IRQHandler+0x14c>)
 80018d0:	f7ff fd0a 	bl	80012e8 <calc_CRC16>
 80018d4:	4603      	mov	r3, r0
 80018d6:	80fb      	strh	r3, [r7, #6]

            // Байты CRC расчитанного.
            uint8_t crc_1 = crc & 0xFF;
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	717b      	strb	r3, [r7, #5]
            uint8_t crc_2 = crc >> 8;
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	713b      	strb	r3, [r7, #4]

            // Байты CRC принятого.
            uint8_t crc_rx_1 = USART1_DATA.buffer_rx[USART1_DATA.counter_rx - 2];
 80018e4:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <USART1_IRQHandler+0x14c>)
 80018e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018e8:	3b02      	subs	r3, #2
 80018ea:	4a1e      	ldr	r2, [pc, #120]	; (8001964 <USART1_IRQHandler+0x14c>)
 80018ec:	5cd3      	ldrb	r3, [r2, r3]
 80018ee:	70fb      	strb	r3, [r7, #3]
            uint8_t crc_rx_2 = USART1_DATA.buffer_rx[USART1_DATA.counter_rx - 1];
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <USART1_IRQHandler+0x14c>)
 80018f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018f4:	3b01      	subs	r3, #1
 80018f6:	4a1b      	ldr	r2, [pc, #108]	; (8001964 <USART1_IRQHandler+0x14c>)
 80018f8:	5cd3      	ldrb	r3, [r2, r3]
 80018fa:	70bb      	strb	r3, [r7, #2]

            // Проверяем соответствие CRC.
            if ( (crc_1 == crc_rx_1) && (crc_2 == crc_rx_2))
 80018fc:	797a      	ldrb	r2, [r7, #5]
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	429a      	cmp	r2, r3
 8001902:	d105      	bne.n	8001910 <USART1_IRQHandler+0xf8>
 8001904:	793a      	ldrb	r2, [r7, #4]
 8001906:	78bb      	ldrb	r3, [r7, #2]
 8001908:	429a      	cmp	r2, r3
 800190a:	d101      	bne.n	8001910 <USART1_IRQHandler+0xf8>
            {
#ifdef CONTROL_MASTER
            	master_receive();
 800190c:	f7ff fa22 	bl	8000d54 <master_receive>
            ВСТАВИТЬ ОБРАБОТКУ ПРИНЯТЫХ БАЙТОВ И ФОРМИРОВАНИЕ ОТВЕТА.

            */

            // Очищаем счётчик принятых байт для следующего приёма.
            USART1_DATA.counter_rx = 0;
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <USART1_IRQHandler+0x14c>)
 8001912:	2200      	movs	r2, #0
 8001914:	665a      	str	r2, [r3, #100]	; 0x64
        }

    // Прерывание по окончанию передачи.
    if ((USART1->ISR & USART_ISR_TC) && (USART1->CR1 & USART_CR1_TCIE))
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <USART1_IRQHandler+0x148>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191e:	2b00      	cmp	r3, #0
 8001920:	d019      	beq.n	8001956 <USART1_IRQHandler+0x13e>
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <USART1_IRQHandler+0x148>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192a:	2b00      	cmp	r3, #0
 800192c:	d013      	beq.n	8001956 <USART1_IRQHandler+0x13e>
    {
        // Очищаем соответствующий бит статуса UART.
        USART1->ICR |= USART_ICR_TCCF;
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <USART1_IRQHandler+0x148>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <USART1_IRQHandler+0x148>)
 8001934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001938:	6213      	str	r3, [r2, #32]

        // Очищаем счётчи отправленных байт для следующей передачи.
        USART1_DATA.counter_tx = 0;
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <USART1_IRQHandler+0x14c>)
 800193c:	2200      	movs	r2, #0
 800193e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        USART1_DATA.size_tx = 0;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <USART1_IRQHandler+0x14c>)
 8001944:	2200      	movs	r2, #0
 8001946:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        // Выключаем прерывание по окончанию передачи.
        USART1->CR1 &= ~USART_CR1_TCIE;
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <USART1_IRQHandler+0x148>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a04      	ldr	r2, [pc, #16]	; (8001960 <USART1_IRQHandler+0x148>)
 8001950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001954:	6013      	str	r3, [r2, #0]
    }
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40011000 	.word	0x40011000
 8001964:	20009d9c 	.word	0x20009d9c

08001968 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800196c:	f3bf 8f4f 	dsb	sy
}
 8001970:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001972:	f3bf 8f6f 	isb	sy
}
 8001976:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <SCB_EnableICache+0x48>)
 800197a:	2200      	movs	r2, #0
 800197c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001980:	f3bf 8f4f 	dsb	sy
}
 8001984:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001986:	f3bf 8f6f 	isb	sy
}
 800198a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <SCB_EnableICache+0x48>)
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <SCB_EnableICache+0x48>)
 8001992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001996:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001998:	f3bf 8f4f 	dsb	sy
}
 800199c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800199e:	f3bf 8f6f 	isb	sy
}
 80019a2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <SCB_InvalidateICache+0x30>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019cc:	f3bf 8f4f 	dsb	sy
}
 80019d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d2:	f3bf 8f6f 	isb	sy
}
 80019d6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <init_RCC>:
#include "stm32f7xx.h"
#include "rcc.h"
void init_RCC(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
	// Сброс пеерфирии

	RCC->AHB1RSTR = 0xFFFFFFFF;
 80019ee:	4b45      	ldr	r3, [pc, #276]	; (8001b04 <init_RCC+0x11c>)
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	611a      	str	r2, [r3, #16]
	RCC->AHB1RSTR = 0x00000000;
 80019f6:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <init_RCC+0x11c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]

	RCC->AHB2RSTR = 0xFFFFFFFF;
 80019fc:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <init_RCC+0x11c>)
 80019fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001a02:	615a      	str	r2, [r3, #20]
	RCC->AHB2RSTR = 0x00000000;
 8001a04:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <init_RCC+0x11c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	615a      	str	r2, [r3, #20]

	RCC->APB1RSTR = 0xFFFFFFFF;
 8001a0a:	4b3e      	ldr	r3, [pc, #248]	; (8001b04 <init_RCC+0x11c>)
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a10:	621a      	str	r2, [r3, #32]
	RCC->APB1RSTR = 0x00000000;
 8001a12:	4b3c      	ldr	r3, [pc, #240]	; (8001b04 <init_RCC+0x11c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]

	RCC->APB2RSTR = 0xFFFFFFFF;
 8001a18:	4b3a      	ldr	r3, [pc, #232]	; (8001b04 <init_RCC+0x11c>)
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24
	RCC->APB2RSTR = 0x00000000;
 8001a20:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <init_RCC+0x11c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
// Кэш инструкций
	SCB_InvalidateICache();
 8001a26:	f7ff ffc5 	bl	80019b4 <SCB_InvalidateICache>
	    SCB_EnableICache();
 8001a2a:	f7ff ff9d 	bl	8001968 <SCB_EnableICache>

	    //SCB_InvalidateDCache();
	  //  SCB_EnableDCache();
	// Обновление переменной с частотой тактирования

	SystemCoreClockUpdate();
 8001a2e:	f000 f881 	bl	8001b34 <SystemCoreClockUpdate>

	// return;

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001a32:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <init_RCC+0x11c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a33      	ldr	r2, [pc, #204]	; (8001b04 <init_RCC+0x11c>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40

	// Включение внешнего генератора
	RCC->CR |= RCC_CR_HSEBYP;
 8001a3e:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <init_RCC+0x11c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a30      	ldr	r2, [pc, #192]	; (8001b04 <init_RCC+0x11c>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEON;
 8001a4a:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <init_RCC+0x11c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a2d      	ldr	r2, [pc, #180]	; (8001b04 <init_RCC+0x11c>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY))
 8001a56:	bf00      	nop
 8001a58:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <init_RCC+0x11c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f9      	beq.n	8001a58 <init_RCC+0x70>
		;

	// Выключение PLL
	RCC->CR &= ~RCC_CR_PLLON;
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <init_RCC+0x11c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a26      	ldr	r2, [pc, #152]	; (8001b04 <init_RCC+0x11c>)
 8001a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	6013      	str	r3, [r2, #0]
	while (RCC->CR & RCC_CR_PLLRDY)
 8001a70:	bf00      	nop
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <init_RCC+0x11c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f9      	bne.n	8001a72 <init_RCC+0x8a>
		;

	// Настройка предделителей для шин переферии
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV4 | RCC_CFGR_PPRE2_DIV2;
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <init_RCC+0x11c>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	4a20      	ldr	r2, [pc, #128]	; (8001b04 <init_RCC+0x11c>)
 8001a84:	f443 4314 	orr.w	r3, r3, #37888	; 0x9400
 8001a88:	6093      	str	r3, [r2, #8]

	// Настройка предделителей PLL
	uint32_t pllcfgr = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]

	pllcfgr |= RCC_PLLCFGR_PLLSRC_HSE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a94:	607b      	str	r3, [r7, #4]
	pllcfgr |= 25 << RCC_PLLCFGR_PLLM_Pos;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f043 0319 	orr.w	r3, r3, #25
 8001a9c:	607b      	str	r3, [r7, #4]
	pllcfgr |= 432 << RCC_PLLCFGR_PLLN_Pos;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f443 43d8 	orr.w	r3, r3, #27648	; 0x6c00
 8001aa4:	607b      	str	r3, [r7, #4]
	pllcfgr |= 0 << RCC_PLLCFGR_PLLP_Pos;

	RCC->PLLCFGR = pllcfgr;
 8001aa6:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <init_RCC+0x11c>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6053      	str	r3, [r2, #4]

	// Настраиваем latancy на 7 для 216 МГц
	FLASH->ACR |= (7 << FLASH_ACR_LATENCY_Pos);
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <init_RCC+0x120>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <init_RCC+0x120>)
 8001ab2:	f043 0307 	orr.w	r3, r3, #7
 8001ab6:	6013      	str	r3, [r2, #0]

	RCC->CR |= RCC_CR_PLLON;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <init_RCC+0x11c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a11      	ldr	r2, [pc, #68]	; (8001b04 <init_RCC+0x11c>)
 8001abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac2:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY))
 8001ac4:	bf00      	nop
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <init_RCC+0x11c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f9      	beq.n	8001ac6 <init_RCC+0xde>
		;

	// Over Drive enable
	PWR->CR1 |= (uint32_t) PWR_CR1_ODEN;
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <init_RCC+0x124>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <init_RCC+0x124>)
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
	PWR->CR1 |= (uint32_t) PWR_CR1_ODSWEN;
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <init_RCC+0x124>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <init_RCC+0x124>)
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae8:	6013      	str	r3, [r2, #0]

	// Выбор PLL как основного источника тактирования
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <init_RCC+0x11c>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <init_RCC+0x11c>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	6093      	str	r3, [r2, #8]

	SystemCoreClockUpdate();
 8001af6:	f000 f81d 	bl	8001b34 <SystemCoreClockUpdate>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40023c00 	.word	0x40023c00
 8001b0c:	40007000 	.word	0x40007000

08001b10 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <SystemInit+0x20>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <SystemInit+0x20>)
 8001b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <SystemCoreClockUpdate>:
 *           value for HSE crystal.
 *
 * @param  None
 * @retval None
 */
void SystemCoreClockUpdate(void) {
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
	uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	2302      	movs	r3, #2
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	607b      	str	r3, [r7, #4]

	/* Get SYSCLK source -------------------------------------------------------*/
	tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001b4e:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <SystemCoreClockUpdate+0xec>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	613b      	str	r3, [r7, #16]

	switch (tmp) {
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d011      	beq.n	8001b82 <SystemCoreClockUpdate+0x4e>
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d844      	bhi.n	8001bee <SystemCoreClockUpdate+0xba>
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <SystemCoreClockUpdate+0x3e>
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d004      	beq.n	8001b7a <SystemCoreClockUpdate+0x46>
 8001b70:	e03d      	b.n	8001bee <SystemCoreClockUpdate+0xba>
	case 0x00: /* HSI used as system clock source */
		SystemCoreClock = HSI_VALUE;
 8001b72:	4b2c      	ldr	r3, [pc, #176]	; (8001c24 <SystemCoreClockUpdate+0xf0>)
 8001b74:	4a2c      	ldr	r2, [pc, #176]	; (8001c28 <SystemCoreClockUpdate+0xf4>)
 8001b76:	601a      	str	r2, [r3, #0]
		break;
 8001b78:	e03d      	b.n	8001bf6 <SystemCoreClockUpdate+0xc2>
	case 0x04: /* HSE used as system clock source */
		SystemCoreClock = HSE_VALUE;
 8001b7a:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <SystemCoreClockUpdate+0xf0>)
 8001b7c:	4a2b      	ldr	r2, [pc, #172]	; (8001c2c <SystemCoreClockUpdate+0xf8>)
 8001b7e:	601a      	str	r2, [r3, #0]
		break;
 8001b80:	e039      	b.n	8001bf6 <SystemCoreClockUpdate+0xc2>
	case 0x08: /* PLL used as system clock source */

		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
		 SYSCLK = PLL_VCO / PLL_P
		 */
		pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001b82:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <SystemCoreClockUpdate+0xec>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	0d9b      	lsrs	r3, r3, #22
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	60bb      	str	r3, [r7, #8]
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b8e:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <SystemCoreClockUpdate+0xec>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b96:	607b      	str	r3, [r7, #4]

		if (pllsource != 0) {
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00c      	beq.n	8001bb8 <SystemCoreClockUpdate+0x84>
			/* HSE used as PLL clock source */
			pllvco = (HSE_VALUE / pllm)
 8001b9e:	4a23      	ldr	r2, [pc, #140]	; (8001c2c <SystemCoreClockUpdate+0xf8>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
					* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001ba6:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <SystemCoreClockUpdate+0xec>)
 8001ba8:	6852      	ldr	r2, [r2, #4]
 8001baa:	0992      	lsrs	r2, r2, #6
 8001bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
			pllvco = (HSE_VALUE / pllm)
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e00b      	b.n	8001bd0 <SystemCoreClockUpdate+0x9c>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (HSI_VALUE / pllm)
 8001bb8:	4a1b      	ldr	r2, [pc, #108]	; (8001c28 <SystemCoreClockUpdate+0xf4>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	fbb2 f3f3 	udiv	r3, r2, r3
					* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001bc0:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <SystemCoreClockUpdate+0xec>)
 8001bc2:	6852      	ldr	r2, [r2, #4]
 8001bc4:	0992      	lsrs	r2, r2, #6
 8001bc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
			pllvco = (HSI_VALUE / pllm)
 8001bca:	fb02 f303 	mul.w	r3, r2, r3
 8001bce:	617b      	str	r3, [r7, #20]
		}

		pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> 16) + 1) * 2;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <SystemCoreClockUpdate+0xec>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	0c1b      	lsrs	r3, r3, #16
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
		SystemCoreClock = pllvco / pllp;
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be8:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <SystemCoreClockUpdate+0xf0>)
 8001bea:	6013      	str	r3, [r2, #0]
		break;
 8001bec:	e003      	b.n	8001bf6 <SystemCoreClockUpdate+0xc2>
	default:
		SystemCoreClock = HSI_VALUE;
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <SystemCoreClockUpdate+0xf0>)
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <SystemCoreClockUpdate+0xf4>)
 8001bf2:	601a      	str	r2, [r3, #0]
		break;
 8001bf4:	bf00      	nop
	}
	/* Compute HCLK frequency --------------------------------------------------*/
	/* Get HCLK prescaler */
	tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <SystemCoreClockUpdate+0xec>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <SystemCoreClockUpdate+0xfc>)
 8001c02:	5cd3      	ldrb	r3, [r2, r3]
 8001c04:	613b      	str	r3, [r7, #16]
	/* HCLK frequency */
	SystemCoreClock >>= tmp;
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <SystemCoreClockUpdate+0xf0>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <SystemCoreClockUpdate+0xf0>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023800 	.word	0x40023800
 8001c24:	20000118 	.word	0x20000118
 8001c28:	00f42400 	.word	0x00f42400
 8001c2c:	017d7840 	.word	0x017d7840
 8001c30:	08001ed8 	.word	0x08001ed8

08001c34 <init_timer8>:
#include "timer.h"
#include "stm32f7xx.h"

void init_timer8(void) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	// Включение тактирования модуля таймер8
	RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <init_timer8+0x7c>)
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <init_timer8+0x7c>)
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	6453      	str	r3, [r2, #68]	; 0x44

	// Предделитель таймера 1
	// Макс счёт 1079 (100кГц)
	TIM8->PSC = 0;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <init_timer8+0x80>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28
	TIM8->ARR = 216000000 / 100000 / 2 - 1;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <init_timer8+0x80>)
 8001c4c:	f240 4237 	movw	r2, #1079	; 0x437
 8001c50:	62da      	str	r2, [r3, #44]	; 0x2c



	// Симметричный счёт (режим 2)
	TIM8->CR1 |= TIM_CR1_CMS_1;
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <init_timer8+0x80>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <init_timer8+0x80>)
 8001c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c5c:	6013      	str	r3, [r2, #0]

	// Включаем канал сравнея
	TIM8->CCER |= TIM_CCER_CC1E;
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <init_timer8+0x80>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <init_timer8+0x80>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6213      	str	r3, [r2, #32]

	// Вкл ШИМ
	timer_PWM_On();
 8001c6a:	f000 f84b 	bl	8001d04 <timer_PWM_On>

	// Вкл. буферизации
	TIM8->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <init_timer8+0x80>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <init_timer8+0x80>)
 8001c74:	f043 0308 	orr.w	r3, r3, #8
 8001c78:	6193      	str	r3, [r2, #24]

	// Вкл физ. канал выхода
	TIM8->BDTR |= TIM_BDTR_MOE;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <init_timer8+0x80>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <init_timer8+0x80>)
 8001c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44

	// Вкл прерывания по обновлению
	TIM8->DIER |= TIM_DIER_UIE;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <init_timer8+0x80>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <init_timer8+0x80>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	60d3      	str	r3, [r2, #12]

	//Включение генерации TRGO по событию Update
	TIM8->CR2 |= TIM_CR2_MMS_1;
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <init_timer8+0x80>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <init_timer8+0x80>)
 8001c98:	f043 0320 	orr.w	r3, r3, #32
 8001c9c:	6053      	str	r3, [r2, #4]

	// Вкл счёт таймера
	TIM8->CR1 |= TIM_CR1_CEN;
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <init_timer8+0x80>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <init_timer8+0x80>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6013      	str	r3, [r2, #0]

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <init_TIMER1>:

void init_TIMER1(void){
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
	// Включение тактирования модуля таймер8
		RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <init_TIMER1+0x40>)
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <init_TIMER1+0x40>)
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	6453      	str	r3, [r2, #68]	; 0x44

		// Предделитель таймера 2
		// Макс счёт 43200 (2.5 кгц)
		TIM1->PSC = 1;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <init_TIMER1+0x44>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28
		TIM1->ARR = 216000000 / 2500 - 1;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <init_TIMER1+0x44>)
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <init_TIMER1+0x48>)
 8001cd2:	62da      	str	r2, [r3, #44]	; 0x2c
		// Вкл прерывания по обновлению
		TIM1->DIER |= TIM_DIER_UIE;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <init_TIMER1+0x44>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <init_TIMER1+0x44>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	60d3      	str	r3, [r2, #12]
		// Вкл счёт таймера
		TIM1->CR1 |= TIM_CR1_CEN;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <init_TIMER1+0x44>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <init_TIMER1+0x44>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	0001517f 	.word	0x0001517f

08001d04 <timer_PWM_On>:

// Функция включения ШИМ таймера 8
void timer_PWM_On(void) {
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

	// Режим ШИМ 1
	TIM8->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <timer_PWM_On+0x1c>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <timer_PWM_On+0x1c>)
 8001d0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d12:	6193      	str	r3, [r2, #24]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40010400 	.word	0x40010400

08001d24 <timer_PWM_Off>:

// Функция выключения ШИМ таймера 8
void timer_PWM_Off(void) {
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

	// Режим принудительного логического 0
	TIM8->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <timer_PWM_Off+0x1c>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <timer_PWM_Off+0x1c>)
 8001d2e:	f023 0320 	bic.w	r3, r3, #32
 8001d32:	6193      	str	r3, [r2, #24]

}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40010400 	.word	0x40010400

08001d44 <init_uart>:
#include "uart.h"

// Структура с переменными USART1
USART_Struct USART1_DATA;

void init_uart(void) {
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

	// Включить тактирование UART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001d48:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <init_uart+0xa0>)
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	4a25      	ldr	r2, [pc, #148]	; (8001de4 <init_uart+0xa0>)
 8001d4e:	f043 0310 	orr.w	r3, r3, #16
 8001d52:	6453      	str	r3, [r2, #68]	; 0x44

	// Длина данных = 8 бит
	USART1->CR1 &= ~(USART_CR1_M_0 | USART_CR1_M_1);
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <init_uart+0xa4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a23      	ldr	r2, [pc, #140]	; (8001de8 <init_uart+0xa4>)
 8001d5a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8001d5e:	6013      	str	r3, [r2, #0]

	// Oversampling = 16 бит
	USART1->CR1 &= ~USART_CR1_OVER8;
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <init_uart+0xa4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a20      	ldr	r2, [pc, #128]	; (8001de8 <init_uart+0xa4>)
 8001d66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d6a:	6013      	str	r3, [r2, #0]

	// Включить контроль бита чётности
	USART1->CR1 &= ~USART_CR1_PCE;
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <init_uart+0xa4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <init_uart+0xa4>)
 8001d72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d76:	6013      	str	r3, [r2, #0]

	// Включение режима приёма и передачи
	USART1->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <init_uart+0xa4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <init_uart+0xa4>)
 8001d7e:	f043 030c 	orr.w	r3, r3, #12
 8001d82:	6013      	str	r3, [r2, #0]

	// Включение таймаута между посылками
	USART1->CR2 |= USART_CR2_RTOEN;
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <init_uart+0xa4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a17      	ldr	r2, [pc, #92]	; (8001de8 <init_uart+0xa4>)
 8001d8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d8e:	6053      	str	r3, [r2, #4]

	// Величина таймаута между посылками
	// (8 бит + 1 старт бит + 1 стоп бит) * 3.5 = 35
	USART1->RTOR = 35;
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <init_uart+0xa4>)
 8001d92:	2223      	movs	r2, #35	; 0x23
 8001d94:	615a      	str	r2, [r3, #20]

	// Скорость обмена 460800 бод
	USART1->BRR = 0x0EA;
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <init_uart+0xa4>)
 8001d98:	22ea      	movs	r2, #234	; 0xea
 8001d9a:	60da      	str	r2, [r3, #12]

	//Количество стоп битов = 1
	USART1->CR2 &= ~(USART_CR2_STOP_0 | USART_CR2_STOP_1);
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <init_uart+0xa4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <init_uart+0xa4>)
 8001da2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001da6:	6053      	str	r3, [r2, #4]

	// Вкл генерацию сигнала включения драйвера на передачу
	USART1->CR3 |= USART_CR3_DEM;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <init_uart+0xa4>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <init_uart+0xa4>)
 8001dae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db2:	6093      	str	r3, [r2, #8]

	// Включить прерывание по приёму одного байта
	USART1->CR1 |= USART_CR1_RXNEIE;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <init_uart+0xa4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <init_uart+0xa4>)
 8001dba:	f043 0320 	orr.w	r3, r3, #32
 8001dbe:	6013      	str	r3, [r2, #0]

	// Включить прерывание по таймауту между посылками
	USART1->CR1 |= USART_CR1_RTOIE;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <init_uart+0xa4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <init_uart+0xa4>)
 8001dc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001dca:	6013      	str	r3, [r2, #0]
	// Включить интерфейс
	USART1->CR1 |= USART_CR1_UE;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <init_uart+0xa4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <init_uart+0xa4>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6013      	str	r3, [r2, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40011000 	.word	0x40011000

08001dec <transmit_USART1>:
 * \brief Запуск передачи данных по USART
 *
 * \param size: кол-во байт для передачи из буфера
 */
void transmit_USART1(uint32_t size)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	USART1_DATA.counter_tx = 0;
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <transmit_USART1+0x30>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	USART1_DATA.size_tx = size;
 8001dfc:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <transmit_USART1+0x30>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

	// Вкл. прерывания по условию пустоты регистра TDR
	USART1->CR1 |= USART_CR1_TXEIE;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <transmit_USART1+0x34>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <transmit_USART1+0x34>)
 8001e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	20009d9c 	.word	0x20009d9c
 8001e20:	40011000 	.word	0x40011000

08001e24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e26:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e28:	f7ff fe72 	bl	8001b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e2e:	490d      	ldr	r1, [pc, #52]	; (8001e64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <LoopForever+0xe>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e44:	4c0a      	ldr	r4, [pc, #40]	; (8001e70 <LoopForever+0x16>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e52:	f000 f811 	bl	8001e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e56:	f7ff f913 	bl	8001080 <main>

08001e5a <LoopForever>:

LoopForever:
    b LoopForever
 8001e5a:	e7fe      	b.n	8001e5a <LoopForever>
  ldr   r0, =_estack
 8001e5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8001e68:	08001ef0 	.word	0x08001ef0
  ldr r2, =_sbss
 8001e6c:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8001e70:	20009e70 	.word	0x20009e70

08001e74 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC_IRQHandler>
	...

08001e78 <__libc_init_array>:
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	4d0d      	ldr	r5, [pc, #52]	; (8001eb0 <__libc_init_array+0x38>)
 8001e7c:	4c0d      	ldr	r4, [pc, #52]	; (8001eb4 <__libc_init_array+0x3c>)
 8001e7e:	1b64      	subs	r4, r4, r5
 8001e80:	10a4      	asrs	r4, r4, #2
 8001e82:	2600      	movs	r6, #0
 8001e84:	42a6      	cmp	r6, r4
 8001e86:	d109      	bne.n	8001e9c <__libc_init_array+0x24>
 8001e88:	4d0b      	ldr	r5, [pc, #44]	; (8001eb8 <__libc_init_array+0x40>)
 8001e8a:	4c0c      	ldr	r4, [pc, #48]	; (8001ebc <__libc_init_array+0x44>)
 8001e8c:	f000 f818 	bl	8001ec0 <_init>
 8001e90:	1b64      	subs	r4, r4, r5
 8001e92:	10a4      	asrs	r4, r4, #2
 8001e94:	2600      	movs	r6, #0
 8001e96:	42a6      	cmp	r6, r4
 8001e98:	d105      	bne.n	8001ea6 <__libc_init_array+0x2e>
 8001e9a:	bd70      	pop	{r4, r5, r6, pc}
 8001e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ea0:	4798      	blx	r3
 8001ea2:	3601      	adds	r6, #1
 8001ea4:	e7ee      	b.n	8001e84 <__libc_init_array+0xc>
 8001ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eaa:	4798      	blx	r3
 8001eac:	3601      	adds	r6, #1
 8001eae:	e7f2      	b.n	8001e96 <__libc_init_array+0x1e>
 8001eb0:	08001ee8 	.word	0x08001ee8
 8001eb4:	08001ee8 	.word	0x08001ee8
 8001eb8:	08001ee8 	.word	0x08001ee8
 8001ebc:	08001eec 	.word	0x08001eec

08001ec0 <_init>:
 8001ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec2:	bf00      	nop
 8001ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ec6:	bc08      	pop	{r3}
 8001ec8:	469e      	mov	lr, r3
 8001eca:	4770      	bx	lr

08001ecc <_fini>:
 8001ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ece:	bf00      	nop
 8001ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ed2:	bc08      	pop	{r3}
 8001ed4:	469e      	mov	lr, r3
 8001ed6:	4770      	bx	lr
