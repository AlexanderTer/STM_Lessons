#ifndef  __CONTROL_H__
#define __CONTROL_H__

#include "dsp.h"

#define IL_REF2 (F2Q(3.f))


// Макрос для сбросаПИД-регулятора
#define PID_RESET(pid)  ( (pid)->integrator.sum = 0, (pid)->diff.xz = 0 )

typedef struct {

	int32_t duty; 					// Коэффициент заполнения, [0..1]

	PID_Controller_Q16_Struct pid_current;// Структура регулятора тока реактора

} Control_Struct; // Структура с параметрами системы кправления

typedef struct {

	unsigned int count; // 0 - режим измерения(не происходит автоопределения смещения)
						// >0 - режим автоопределения смещения

	struct {
		int32_t inj; 			// Сигнал инжекции(частотные характеристики)
		int32_t u2; 			// Выходное напряжение, В
		int32_t iL; 			// Ток реактора
		int32_t temperature;  // Температура
		int32_t u1; 			// Входное напряжение
		int32_t in; 			// Выходной ток
		int32_t in_av; //Усреднённый ток после фильтра
	} data, shift, scale, sum; 	// data - рассчитанное значение
	// shift - смещение значения
	// scale - коэффициент масштабироания
	// sum - переменная для накопления при автоопределении смещения

	struct {
		int32_t data;			// Значение переменной для вывода на ЦАП
		int32_t shift;		// Смещение значения переменной
		int32_t scale;		// Коэффициент масштабирования переменной

	} dac[2]; // Структура с параметрами ЦАП1 и ЦАП2

} Measure_Struct; // Структура с параметрами измерений

typedef struct {

	int32_t iL_max; // Условие срабатывания защиты по току реактора
	int32_t in_max; // Условие сабатывания защиты по максимальному выходному току
	int32_t u1_max; // условие срабатывания защиты по максимальному входному напряжению
	int32_t u2_max; // условие срабатывания защиты по максимальному выходному напряжению

	int32_t iL_int_sum; // Сумма (выход интегратора) интегрально-токовой защиты (A*c)
	int32_t iL_int_max; // Уставка условия срабатывания интегрально-токовой защиты (A*c)
	int32_t iL_n;       // Номинальный ток реатора

	struct{
		int32_t duty_min;		// Минимальный коэффициент заполнения
		int32_t duty_max;		// Максимальный коэффициент заполнения
	}sat; // Параметры ограничителей

} Protect_Struct; // Структура с параметрами защит

extern Control_Struct Boost_Control;
extern Measure_Struct Boost_Measure;
extern Protect_Struct Boost_Protect;


#endif
